import{_ as a,o as e,c as t,O as r}from"./chunks/framework.acd5de9c.js";const f=JSON.parse('{"title":"Chapter 01 - 리팩터링: 첫 번째 예시 (작성중)","description":"","frontmatter":{},"headers":[],"relativePath":"study/refactoring/chapter1.md","filePath":"study/refactoring/chapter1.md","lastUpdated":1690730700000}'),i={name:"study/refactoring/chapter1.md"},l=r('<h1 id="chapter-01-리팩터링-첫-번째-예시-작성중" tabindex="-1">Chapter 01 - 리팩터링: 첫 번째 예시 (작성중) <a class="header-anchor" href="#chapter-01-리팩터링-첫-번째-예시-작성중" aria-label="Permalink to &quot;Chapter 01 - 리팩터링: 첫 번째 예시 (작성중)&quot;">​</a></h1><h2 id="인상-깊었던-문장-코드" tabindex="-1">인상 깊었던 문장, 코드 <a class="header-anchor" href="#인상-깊었던-문장-코드" aria-label="Permalink to &quot;인상 깊었던 문장, 코드&quot;">​</a></h2><h3 id="_1-2-예시-프로그램을-본-소감" tabindex="-1">1.2 예시 프로그램을 본 소감 <a class="header-anchor" href="#_1-2-예시-프로그램을-본-소감" aria-label="Permalink to &quot;1.2 예시 프로그램을 본 소감&quot;">​</a></h3><ul><li><p>프로그램이 잘 작동하는 상황에서 그저 코드가 &#39;지저분하다&#39;는 이유로 불평하는 것은 프로그램의 구조를 너무 미적인 기준으로만 판단하는 건 아닐까? 컴파일러는 코드가 깔끔하든 지저분하든 개의치 않으니 말이다. 하지만 그 코드를 수정하려면 사람이 개입되고, 사람은 코드의 미적 상태에 민감하다. 설계가 나쁜 시스템은 수정하기 어렵다. 원하는 동작을 수행하도록 하기위해 수정해야 할 부분을 찾고, 기존 코드와 잘 맞물려 작동하게 할 방법을 강구하기가 어렵기 떄문이다. 무엇을 수정할지 찾기 어렵다면 실수를 저질러서 버그가 생길 가능성도 높아진다.</p></li><li><p>그래서 나는 수백 줄짜리 코드를 수정할 때면 먼저 프로그램의 작동 방식을 더 쉽게 파악할 수 있도록 코드를 여러 함수와 프로그램 요소로 재구성한다. 프로그램의 구조가 빈약하다면 대체로 구조부터 바로잡은 뒤에 기능을 수정하는 편이 작업하기가 훨씬 수월하다.</p></li><li><p>프로그램이 새로운 기능을 추가하기에 편한 구조가 아니라면, 먼저 기능을 추가하기 쉬운 형태로 리팩터링하고 나서 원하는 기능을 추가한다.</p></li></ul><h3 id="_1-3-리팩터링의-첫-단계" tabindex="-1">1.3 리팩터링의 첫 단계 <a class="header-anchor" href="#_1-3-리팩터링의-첫-단계" aria-label="Permalink to &quot;1.3 리팩터링의 첫 단계&quot;">​</a></h3><ul><li>리팩터링의 첫 단계는 항상 똑같다. 리팩터링할 코드 영역을 꼼꼼하게 검사해줄 테스트 코드들부터 마련해야 한다. 리팩터링에서 테스트의 역할은 굉장히 중요하다.</li></ul><h2 id="읽고나서-느낀-점" tabindex="-1">읽고나서 느낀 점 <a class="header-anchor" href="#읽고나서-느낀-점" aria-label="Permalink to &quot;읽고나서 느낀 점&quot;">​</a></h2><ul><li>내가 생각하던 리팩터링과 다르게 실제 리팩터링은 아주 작은 단위의 변경이었다.</li><li>어떤 코드를 리팩터링 대상인지 포착하는 것이 중요할 것 같은데, 경험이 필요하지 않을까?</li><li>테스트 코드가 중요해보인다. 하지만 실제 우리 회사에 적용하는데 어려움이 있는 것도 사실이라 그 간극을 어떻게 메울지가 고민된다. (책에서는 <code>레거시 코드 활용 전략</code>이라는 책을 추천)</li></ul>',8),o=[l];function c(h,n,d,s,_,p){return e(),t("div",null,o)}const m=a(i,[["render",c]]);export{f as __pageData,m as default};
