import{_ as l,o as i,c as e,a as t}from"./app.0d4db754.js";const N=JSON.parse('{"title":"짧은 글","description":"","frontmatter":{},"headers":[{"level":2,"title":"요약: 네 시대의 자바스크립트 프레임워크","slug":"요약-네-시대의-자바스크립트-프레임워크","link":"#요약-네-시대의-자바스크립트-프레임워크","children":[]},{"level":2,"title":"요약: State of Vue 2022 Amsterdam Recap","slug":"요약-state-of-vue-2022-amsterdam-recap","link":"#요약-state-of-vue-2022-amsterdam-recap","children":[]},{"level":2,"title":"요약: NDC [키노트] 블록체인과 가상세계의 진화","slug":"요약-ndc-키노트-블록체인과-가상세계의-진화","link":"#요약-ndc-키노트-블록체인과-가상세계의-진화","children":[]},{"level":2,"title":"요약: 토스 | Slash 22 - 미친 생산성을 위한 React Native","slug":"요약-토스-slash-22-미친-생산성을-위한-react-native","link":"#요약-토스-slash-22-미친-생산성을-위한-react-native","children":[]}],"relativePath":"log/짧은글.md","lastUpdated":1670940460000}'),a={name:"log/짧은글.md"},r=t('<h1 id="짧은-글" tabindex="-1">짧은 글 <a class="header-anchor" href="#짧은-글" aria-hidden="true">#</a></h1><h2 id="요약-네-시대의-자바스크립트-프레임워크" tabindex="-1">요약: 네 시대의 자바스크립트 프레임워크 <a class="header-anchor" href="#요약-네-시대의-자바스크립트-프레임워크" aria-hidden="true">#</a></h2><blockquote><p>원문: <a href="https://www.pzuraq.com/blog/four-eras-of-javascript-frameworks" target="_blank" rel="noreferrer">Four Eras of JavaScript Frameworks</a></p></blockquote><p>자바스크립트 생태계는 올바르게 나아가고 있다.</p><p>이전 2개의 시대를 지나면서 여러 교훈을 얻고 발전해나가고 있음</p><p>3세대 프레임워크(Next.js, Nuxt.js, SveltKit, Remix 등)들은 1세대가 목표했던 올인원 솔루션을 다시 목표로 하고 있음.</p><p>2세대 프레임워크(React.js, Vue.js, Svelte) 겪었던 문제들을 해결해면서 장점들도 가져가고 있다.</p><ul><li>문제들 : 라우팅, SSR, API 통신, 상태관리 등은 여전히 개발자들에게 맡겼음. 선택지가 지나치게 많아 제한된 자원을 가진 개발자들이 개발하면서 문제를 만들어내게 되는 경우가 생김</li></ul><p>3세대 프레임워크의 주요 초점들</p><ul><li>우리는 컴포넌트가 기반이 되는 핵심 요소라는데 동의했으므로, 라우터, 빌드 시스템, 폴더 구조 등 앱의 다른 부분을 표준화하는 것이 합리적이었음</li><li>특정 요청에 대한 API secret 숨기기, 페이지 반환 시 헤더 수정, API 요청 프록시와 같은 작업을 수행할 수 있도록 백엔드와 프런트엔드를 함께 사용하는 것이 매우 유용하다는 것을 알았다.</li><li>최신 프레임워크는 그 잠재력을 최대한 활용하여 클라이언트와 서버의 통합을 원활하게 하고 있다. =&gt; 마침내 우리는 네이티브 앱용 SDK와 동일한 환경에서 경쟁하기 시작</li></ul><p>기타 키워드들</p><ul><li><p>웹 컴포넌트</p><ul><li>웹 컴포넌트는 조용히 발전하며 SSR과 같은 문제에 대한 솔루션을 작업하고 전역 등록을 제거해 3세대 프레임워크와 호환이 더 잘되도록 하고 있음</li></ul></li><li><p>웹어셈블리</p><ul><li>Rust, 파이썬, 스위프트, 자바 등은 더 나은 UX와 함께 마침내 프런트엔드와 백엔드 사이의 장벽을 거의 0으로 줄일 수 있음</li></ul></li></ul><h2 id="요약-state-of-vue-2022-amsterdam-recap" tabindex="-1">요약: State of Vue 2022 Amsterdam Recap <a class="header-anchor" href="#요약-state-of-vue-2022-amsterdam-recap" aria-hidden="true">#</a></h2><blockquote><p>원문: <a href="https://dev.to/strift/state-of-vue-2022-amsterdam-recap-36jp" target="_blank" rel="noreferrer">State of Vue 2022 Amsterdam Recap</a></p></blockquote><ul><li>Vue 2.x <ul><li>Vue 2.7에서는 Vue 3의 Composition API, <code>script setup</code>을 백포팅하는데 집중중</li><li>Vue 2.7이 마지막 minor version 업그레이드가 될 것</li></ul></li><li>Vue 3.x <ul><li>Vue 3.3에서 <code>Suspense</code> 안정화될 것 <ul><li>Nuxt 3에서 문제없도록 테스트 중</li></ul></li><li>reactivity transform API도 안정화</li><li>SSR 강화</li></ul></li><li>Vite <ul><li>Vite 3 메이저 버전 업데이트 예정 <ul><li>대부분의 사람들은 변화를 못느낄 것</li><li>직접 Vite를 사용하는 라이브러리(Nuxt, Vitest)는 업데이트가 필요</li><li>가장 큰 변화는 내부적으로 완전 ESM으로 전환 -&gt; node.js 12 지원 중단</li></ul></li></ul></li><li>⚠Experimental <ul><li>새로운 compliation 전략을 실험중 <ul><li>실제 적용될지는 미지수</li><li>SolidJS에 영감을 받았고, no-virtual DOM로 옮겨가는 아이디어</li><li>적용된다면 메모리 사용에 큰 이득이 예상됨</li></ul></li></ul></li><hr><li>Nuxt 3 <ul><li>안정화에 가까워짐. 마이그레이션을 시작해도 무방할듯. 이번 여름에 릴리즈 예정</li></ul></li><li>Vuetify 3 <ul><li>아직 베타. 2주 후 다음 릴리즈 예정</li></ul></li><li>Vitepress 1 <ul><li>1 버전 릴리즈를 위해 노력중</li><li>Vue3 기반 Static Site Generation 도구로 권장하고 있음</li></ul></li></ul><h2 id="요약-ndc-키노트-블록체인과-가상세계의-진화" tabindex="-1">요약: NDC [키노트] 블록체인과 가상세계의 진화 <a class="header-anchor" href="#요약-ndc-키노트-블록체인과-가상세계의-진화" aria-hidden="true">#</a></h2><ul><li>코인, P2E보다는 블록체인 자체에 포커스</li><li>닫힌 생태계를 열린 생태계로 확장하는 수단</li><li>가상 세계를 진화</li><li>가상 세계의 물리적 한계를 넘어 다른 가상 세계와 융합하는 통합 플랫폼, 통합 가상 세계</li><li>블록체인이 어떤 역할을 하길래? - 한마디로 융합하고 나눠주기 좋은 투명한 인프라 기술 - 투명성 | 열린 생태계 | 가치의 저장 <ul><li>투명성 : 온체인 기록, 거버넌스</li><li>열린 생태계 : 누구나 기여 가능, 기여에 따라 보상을 획득</li><li>가치의 저장 : NFT, 토큰</li></ul></li><li>기존 게임들이 서버라는 폐쇄된 환경을 넘어서지는 못했다 - 아이템, 캐릭터, 게임 머니 등은 한 게임 안에서만 통용됐다. - 블록체인 생태계에서는 모든 재화들이 자유롭게 연결 + 대체 불가능한 존재를 유지 - 전통적인 스토어형태 게임은 점점 쇠퇴될 것 - 유용한 인프라 세트, IP, 세계관, 인정받는 커뮤니티, 의미를 가지는 것이 중요해진다 - 플랫폼을 표방한 적도 없고, 주인도 없는 이 거대한 블록체인 생태계가 현존하고 가장 크고 유용한 게임 플랫폼일 수 있다 - 폐쇄된 플랫폼으로 유저, 재화, 트래픽을 독점하지 않고 융합, 통합하여 이 블록체인 생태계에 중요한 일원이 되는 것이 의미가 있을 것</li><li>블록체인에 맞는 게임 설계가 필요하다 - 투명성 <ul><li>현재 게임에서는 개발사의 의도에 따라 밸런스와 경제 상황이 바뀔 수 있다</li><li>유저들이 회사를 바라보면서 게임을 하게 된다.</li><li>가상 세계의 완성도와 몰입에 방해를 한다.</li><li>개발사조차 바꾸기 어려운 합의된 규칙이 해법이 될 수 있다.</li><li>결국 가상 세계에 몰입하도록 투명성이 도움을 줄 수 있을 것</li></ul></li><li>열린 생태계와 기여에 따른 보상 - 게임의 성장에 따른 과실이 모든 기여자에게 돌아갈 수 있게 한다면 더 좋을 것 같았다. - 개발사도 일원이 되는 것이다</li><li>가치의 저장과 이동 - NFT가 있어도 쓸데가 없으면 무의미하지 않는지에 대한 해결이 있어야 한다고 생각했다 - 이건 넥슨이 잘할 수 있는 부분 - 게임 NFT는 게임이 없어지면 쓸모가 없어질 확률이 높다. - 나중에 활용하리라는 기대가 있지만 실제로 활용될 확률은 얼마나 될지 모른다. - 실질적인 그림이 필요 <ul><li>메이플 스토리 IP를 이용한 블록체인 게임</li><li>열린 생태계, 가치의 저장과 신뢰가 중요</li><li>메이플 스토리라는 넥슨의 훼손하면 안되는 IP를 통해 안되면 말지식이 아닌 진정성을 획득</li><li>여러 서비스들을 묶어서 공유할 수 있는 NFT, 토큰을 만드는 것이 중요하겠다는 결론</li><li>메이플스토리 유니버스 - NFT들이 주인공. 그 밑에 각 게임들이 존재한다</li><li>유니버스는 Maplestory N, N Mobile, MOD N(샌드박스 제작 플랫폼), N SDK(NFT 기반으로 여러 게임을 만들 수 있는 툴)</li><li>N은 기존 메이플 + NFT</li><li>아이템 NFT로 존재, 토큰도 게임중 획득 가능</li><li>캐시샵 없음</li><li>NFT 프리세일도 진행 X</li><li>MOD N <ul><li>메이플 스토리 NFT + 외부 NFT로 게임 제작 가능</li><li>제작한 게임은 모두 제작자 소유</li></ul></li><li>N SDK <ul><li>메이플 유니버스에서 얻은 NFT로 다양한 앱을 만들 수 있는 SDK</li><li>예를들어 NFT 홀더들을 위한 굿즈 제작 펀딩 앱</li></ul></li></ul></li></ul><h2 id="요약-토스-slash-22-미친-생산성을-위한-react-native" tabindex="-1">요약: 토스 | Slash 22 - 미친 생산성을 위한 React Native <a class="header-anchor" href="#요약-토스-slash-22-미친-생산성을-위한-react-native" aria-hidden="true">#</a></h2><ul><li>기존 앱의 문제점 <ul><li>느린 배포 속도, 적은 개발 리소스</li><li>iOS 빌드 속도 - 하루 1/3 침대, 1/3 지하철, 1/3 빌드</li><li>배포 심사 - 느리고 불규칙적, 1일 ~ 4주</li><li>앱 업데이트 - 동남아의 느린 네트워크, 자동 업데이트를 꺼둔 유저들도 많다.</li></ul></li><li>Flutter vs React Native <table><th><td>장점</td><td>단점</td></th><tr><td>Flutter</td><td><div>훌륭한 공식 라이브러리 생태계</div><div>React Native보다 더 많이 사용됨</div></td><td>높은 학습 비용</td></tr><tr><td>React Native</td><td><div>Codepush 기능 사용 가능</div><div>채용에 용이한 풍부한 개발자 풀</div></td><td>빈약한 공식 라이브러리 생태계</td></tr></table><ul><li>+ Code Push (React Native) - 앱 내에 JavaScript 번들을 포함할 수 있고, 해당 번들을 업데이트해서 앱 업데이트 없이 최신 기능을 전달 가능</li></ul></li><li><ul><li>앱을 완전히 다시 만들기로 하고, 병렬적으로 기존앱은 부분적으로 React Native를 적용</li><li>Native API가 필요한 기존 앱 기능을 구현해보면서 테스트</li><li>비싼 그래픽 연산과 같은 높은 성능이 필요한 작업은 부분적으로 Native View를 띄워 해결</li></ul></li><li>Native 코드를 건드려야 하는 작업과 JavaScript로만 완료할 수 있는 태스크 2가지로 분류</li><li>기존 앱 사용자의 경험을 해치지 않기 위해 꼼꼼하고 많은 테스트를 수행</li><li>메인 로직이 아닌 숨어있는 로직을 코드레벨에서 발견하며 옮김. 광고 마케팅 툴, 푸시, 로그 등</li><li>3개월간 200번에 달하는 Code Push를 통한 업데이트가 가능했음</li><li>React Native 사용 후기 - iOS 개발자 <ul><li>개발 속도 - 핫 리로딩. Swift로 개발시 3달, 미숙한 TypeScript로도 2주</li><li>커리어적인 고민 - 전문성 포기하는건 아닐지? 기술은 이미 6 ~ 7년 지났고 Object C에서 Swift로 넘어갈 때 느꼈던 기분. 역량 확장이라고 생각하고 고민을 하지 않기로 결정</li></ul></li><li>React Native 사용 후기 - 프론트엔드 개발자 <ul><li>저렴한 학습 비용</li><li>역할 확장 - 앱의 모든 flow에 관여</li></ul></li><li>팀 관점에서 <ul><li>빠르게 실패, 개선 반복 가능</li><li>채용이 어려운 초기 스타트업에 유용할 것</li></ul></li></ul>',19),u=[r];function d(s,c,o,n,p,h){return i(),e("div",null,u)}const S=l(a,[["render",d]]);export{N as __pageData,S as default};
