import{_ as l,c as h,j as e,a as s,G as t,w as n,a1 as d,B as p,o as c}from"./chunks/framework.74NQyPOy.js";const k="/blog/images/vdom1.svg",r="/blog/images/vdom2.svg",v="/blog/images/vdom3.svg",g="/blog/images/vdom4.svg",E="/blog/images/vdom5.svg",o="/blog/images/vdom6.svg",y="/blog/images/static-analysis1.svg",u="/blog/images/static-analysis2.svg",m="/blog/images/static-analysis3.svg",D="/blog/images/static-analysis4.svg",b="/blog/images/static-analysis5.svg",f="/blog/images/static-analysis6.svg",F="/blog/images/dirty-checking1.svg",A="/blog/images/dirty-checking2.svg",M="/blog/images/dirty-checking3.svg",q="/blog/images/benchmark.png",I=JSON.parse('{"title":"가상 DOM: 블록으로 돌아가기","description":"","frontmatter":{"feArticle":true},"headers":[],"relativePath":"log/virtual-dom-back-in-block.md","filePath":"log/virtual-dom-back-in-block.md","lastUpdated":1687787955000}'),O={name:"log/virtual-dom-back-in-block.md"};function C(_,a,x,w,B,j){const i=p("Callout");return c(),h("div",null,[a[2]||(a[2]=e("h1",{id:"가상-dom-블록으로-돌아가기",tabindex:"-1"},[s("가상 DOM: 블록으로 돌아가기 "),e("a",{class:"header-anchor",href:"#가상-dom-블록으로-돌아가기","aria-label":'Permalink to "가상 DOM: 블록으로 돌아가기"'},"​")],-1)),a[3]||(a[3]=e("blockquote",null,[e("p",null,[s("원문: "),e("a",{href:"https://million.dev/blog/virtual-dom",target:"_blank",rel:"noreferrer"},"https://million.dev/blog/virtual-dom")])],-1)),a[4]||(a[4]=e("hr",null,null,-1)),t(i,{type:"info"},{default:n(()=>a[0]||(a[0]=[e("p",null,[e("strong",null,"이 글은 심층적인 분석글입니다 — 초보자를 위한 글이 아닙니다."),s(" Million.js를 배우고 싶으시다면 "),e("a",{href:"https://million.dev/docs/quickstart",target:"_blank",rel:"noreferrer"},"빠른 시작"),s("을 참조하세요.")],-1),e("p",null,"이 포스팅은 React와 Million.js 내부를 자세히 살펴보고자 하는 숙련된 프로그래머를 대상으로 합니다.",-1)])),_:1}),a[5]||(a[5]=d(`<p data-v-7c83aee7>약 4년 전, 리치 해리스(Rich Harris)는 기존 가상 DOM 조작의 성능을 분석한 <a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead" target="_blank" rel="noreferrer" data-v-7c83aee7>가상 DOM은 순수한 오버헤드입니다</a>라는 글을 발표했습니다. <a href="#0" data-v-7c83aee7><sup data-v-7c83aee7>[0]</sup></a></p><blockquote data-v-7c83aee7><p data-v-7c83aee7><sup id="#0" data-v-7c83aee7>[0]</sup> &quot;&#39;가상 DOM은 빠르다&#39;는 문구를 들어 보셨을 겁니다. 이는 보통 가상 DOM이 실제 DOM보다 빠르다는 뜻으로 사용됩니다. 그리고 놀랍도록 지속적으로 언급되는 밈(meme)입니다&quot; - 해리스, 2018</p></blockquote><p data-v-7c83aee7>리치 해리스는 &quot;가상 DOM은 순수한 오버헤드입니다&quot;라는 글에서 리액트와 같은 프레임워크에서 널리 알려진 기능인 가상 DOM이 많은 개발자가 생각하는 것만큼 효율적이지 않다고 주장합니다. 이어서 그는 이 기능의 작동 방식을 비판하며 대안적인 접근 방식을 제시합니다.</p><p data-v-7c83aee7>그리고 몇 년 후 가상 DOM은 <strong data-v-7c83aee7>순수한 오버헤드</strong>라는 새로운 밈이 등장했습니다. 이 밈 또한 크게 유행했고 &quot;가상 DOM이 없는&quot; 프레임워크 운동을 이데올로기적 소수 집단에서 전면에 드러나는 다수 진영이 되었습니다.</p><p data-v-7c83aee7>따라서 가상 DOM은 &quot;아무도 좋아하지 않지만, 가족 모임에 초대해야 하는 성가신 사촌&quot;의 지위로 강등되었습니다. 선언적 UI의 편의성을 위해 지불해야 하는 성능에 대한 세금, 즉 필요악이 된 것입니다.</p><p data-v-7c83aee7>지금까지는요.</p><h2 id="탄생-이야기" tabindex="-1" data-v-7c83aee7>탄생 이야기 <a class="header-anchor" href="#탄생-이야기" aria-label="Permalink to &quot;탄생 이야기&quot;" data-v-7c83aee7>​</a></h2><p data-v-7c83aee7>가상 DOM은 실제 DOM의 잦은 조작으로 인한 성능 문제를 해결하기 위해 만들어졌습니다. 실제 DOM의 경량화된 인메모리 표현이었습니다. 나중에 실제 웹 페이지를 업데이트할 때 참조로 사용할 수 있습니다.</p><p data-v-7c83aee7>컴포넌트가 렌더링 되면 가상 DOM은 새 상태와 이전 상태의 차이를 계산하고(&quot;비교(diffing)&quot;이라고 하는 프로세스) 업데이트된 가상 DOM과 동기화하기 위해 실제 DOM에 최소한의 변경을 수행합니다(&quot;재조정(reconciliation)&quot;이라고 하는 프로세스).</p><h3 id="시각적-예시" tabindex="-1" data-v-7c83aee7>시각적 예시 <a class="header-anchor" href="#시각적-예시" aria-label="Permalink to &quot;시각적 예시&quot;" data-v-7c83aee7>​</a></h3><p data-v-7c83aee7>리액트 컴포넌트 <code data-v-7c83aee7>&lt;Numbers /&gt;</code>가 있다고 가정해 봅시다.</p><div class="language-jsx vp-adaptive-theme" data-v-7c83aee7><button title="Copy Code" class="copy" data-v-7c83aee7></button><span class="lang" data-v-7c83aee7>jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-7c83aee7><code data-v-7c83aee7><span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-7c83aee7> Numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>() {</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> (</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> /&gt;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>boo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> /&gt;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>  );</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>}</span></span></code></pre></div><p data-v-7c83aee7>리액트가 이 컴포넌트를 렌더링할 때, 차이를 확인하는 과정(비교)과 DOM을 업데이트하는 과정(재조정)을 거칩니다. 이 과정은 대략 다음과 같습니다.</p><figure data-v-7c83aee7><img src="`+k+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7> 현재의 가상 DOM과 새로운 가상 DOM 두 가지가 주어집니다. 현재 가상 DOM은 우리의 UI가 어떻게 보이는지를 나타내고, 새로운 가상 DOM은 우리가 원하는 모습을 나타냅니다. </figcaption></figure><figure data-v-7c83aee7><img src="'+r+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7>첫 번째 노드를 비교한 결과 차이점이 없으므로 다음으로 넘어갑니다. </figcaption></figure><figure data-v-7c83aee7><img src="'+v+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7>두 번째 노드의 차이를 확인하고 차이점을 발견합니다. DOM에서 업데이트를 수행합니다. </figcaption></figure><figure data-v-7c83aee7><img src="'+g+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7>세 번째 노드의 차이를 확인하고 새로운 가상 DOM에서는 없어진 것을 발견하였으므로, DOM에서 이를 제거합니다. </figcaption></figure><figure data-v-7c83aee7><img src="'+E+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7>네 번째 노드의 차이를 확인하고 새로운 가상 DOM에서는 없어진 것을 발견하였으므로, DOM에서 이를 제거합니다. </figcaption></figure><figure data-v-7c83aee7><img src="'+o+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7>다섯 번째 노드의 차이를 확인하고 차이점을 발견합니다. DOM에서 업데이트를 수행하고 작업을 마칩니다. </figcaption></figure><h3 id="문제점" tabindex="-1" data-v-7c83aee7>문제점 <a class="header-anchor" href="#문제점" aria-label="Permalink to &quot;문제점&quot;" data-v-7c83aee7>​</a></h3><p data-v-7c83aee7>이전 예제에서 비교 과정이 트리의 크기에 의존하므로 결국 가상 DOM의 병목 현상을 발생시키는 것을 알 수 있습니다. 노드가 많을수록 차이를 계산하는 데 더 많은 시간이 걸립니다.</p><p data-v-7c83aee7>스벨트와 같은 최신 프레임워크에서는 성능 오버헤드 때문에 가상 DOM을 전혀 사용하지 않습니다. 대신, 스벨트는 &quot;더티 체킹&quot;이라는 기법을 사용하여 무엇이 변했는지 파악합니다. 세분화된 반응성 프레임워크인 SolidJS는 한 단계 더 나아가, 변경된 부분을 정확하게 찾아내어 DOM의 해당 부분만 업데이트합니다.</p><h2 id="블록-가상-dom" tabindex="-1" data-v-7c83aee7>블록 가상 DOM <a class="header-anchor" href="#블록-가상-dom" aria-label="Permalink to &quot;블록 가상 DOM&quot;" data-v-7c83aee7>​</a></h2><p data-v-7c83aee7>2022년, <a href="https://github.com/ged-odoo/blockdom" target="_blank" rel="noreferrer" data-v-7c83aee7>Blockdom</a>이 출시되었습니다. 근본적으로 다른 접근법을 취하는 Blockdom은 &quot;블록 가상 DOM&quot;이라는 개념을 도입했습니다.</p><p data-v-7c83aee7>블록 가상 DOM은 비교에 대해 다른 접근법을 취하며, 이는 크게 두 부분으로 나눌 수 있습니다.</p><ol data-v-7c83aee7><li data-v-7c83aee7><p data-v-7c83aee7><strong data-v-7c83aee7>정적 분석</strong>: 가상 DOM을 분석해 트리의 동적 부분을 &quot;Edit Map&quot;으로 추출하거나, 가상 DOM의 동적 부분을 &quot;edits&quot;(매핑) 목록으로 추출합니다.</p></li><li data-v-7c83aee7><p data-v-7c83aee7><strong data-v-7c83aee7>더티 체킹</strong>: 상태(가상 DOM 트리가 <strong data-v-7c83aee7>아님</strong>)의 차이를 계산해 변경을 확인합니다. 상태가 변경된 경우 Edit Map을 통해 DOM을 직접 업데이트합니다.</p></li></ol>',26)),t(i,{type:"info"},{default:n(()=>a[1]||(a[1]=[e("p",null,[e("strong",null,"요약: DOM이 아닌 데이터의 차이를 계산합니다.")],-1),e("p",null,"왜 그럴까요? 데이터의 크기는 일반적으로 DOM의 크기보다 훨씬 작습니다. 또한 전체 DOM 노드의 차이를 계산하는 것보다 데이터 값의 차이를 계산하는 것이 훨씬 간단할 수 있습니다.",-1)])),_:1}),a[6]||(a[6]=d(`<p data-v-7c83aee7>Million.js는 Blockdom과 비슷한 접근 방식을 취하므로 이 글의 나머지 부분에서는 Million.js 문법을 사용하겠습니다.</p><h3 id="카운터-예제" tabindex="-1" data-v-7c83aee7>카운터 예제 <a class="header-anchor" href="#카운터-예제" aria-label="Permalink to &quot;카운터 예제&quot;" data-v-7c83aee7>​</a></h3><p data-v-7c83aee7>간단한 카운터 예시와 Million.js로 어떻게 처리하는지 살펴보겠습니다.</p><div class="language-jsx vp-adaptive-theme" data-v-7c83aee7><button title="Copy Code" class="copy" data-v-7c83aee7></button><span class="lang" data-v-7c83aee7>jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-7c83aee7><code data-v-7c83aee7><span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> { useState } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-7c83aee7> &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> { block } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;" data-v-7c83aee7> &quot;million/react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>;</span></span>
<span class="line" data-v-7c83aee7></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-7c83aee7> Count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>() {</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-7c83aee7>count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-7c83aee7>setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-7c83aee7> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-7c83aee7>0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>);</span></span>
<span class="line" data-v-7c83aee7></span>
<span class="line highlighted" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-7c83aee7> node1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-7c83aee7> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>;</span></span>
<span class="line highlighted" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-7c83aee7> node2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-7c83aee7> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>;</span></span>
<span class="line" data-v-7c83aee7></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> (</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line highlighted" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;{node1}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line highlighted" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;{node2}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>button</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-7c83aee7>        onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> {</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-7c83aee7>          setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-7c83aee7> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>);</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>        }}</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>      &gt;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>        Increment Count</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>  );</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>}</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-7c83aee7> CountBlock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-7c83aee7> block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>(Count);</span></span></code></pre></div><iframe src="https://codesandbox.io/embed/vigilant-snowflake-nf5v8h?fontsize=14&amp;hidenavigation=1&amp;theme=dark&amp;view=preview" style="width:100%;height:300px;border:0;border-radius:4px;overflow:hidden;" title="vigilant-snowflake-nf5v8h" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts" data-v-7c83aee7></iframe><h3 id="정적-분석" tabindex="-1" data-v-7c83aee7>정적 분석 <a class="header-anchor" href="#정적-분석" aria-label="Permalink to &quot;정적 분석&quot;" data-v-7c83aee7>​</a></h3><p data-v-7c83aee7>정적 분석 단계는 Million.js의 실험용 컴파일러를 사용하는지 여부에 따라 컴파일 시 또는 런타임의 첫 시점에 발생할 수 있습니다.</p><p data-v-7c83aee7>이 단계는 가상 DOM의 동적 부분을 Edit Map으로 추출하는 역할을 담당합니다.</p><figure data-v-7c83aee7><img src="`+y+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7> 리액트로 JSX를 렌더링 하는 대신 Million.js를 사용하여 렌더링 합니다. 이 과정에서 가상 DOM에 &quot;구멍&quot;(&quot;?&quot;으로 표현)을 전달합니다. 이 구멍은 동적 콘텐츠의 플레이스홀더 역할을 하며 정적 분석 과정에서 사용됩니다. </figcaption></figure><figure data-v-7c83aee7><img src="'+u+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7> 이제 정적 분석을 시작합니다. 첫 번째 노드에서 플레이스홀더를 확인하지만 아무것도 찾지 못했습니다. 다음으로 이동합니다. </figcaption></figure><figure data-v-7c83aee7><img src="'+m+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7>두 번째 노드에서 플레이스홀더를 확인하지만 아무것도 찾지 못했습니다. 다음으로 이동합니다. </figcaption></figure><figure data-v-7c83aee7><img src="'+D+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7>세 번째 노드에서 플레이스홀더를 확인하여 &quot;?&quot;를 찾습니다. 플레이스홀더를 &quot;Edit Mapping&quot;으로 푸시해 <code data-v-7c83aee7>prop1</code>을 플레이스홀더 노드에 연결합니다. 그런 다음 블록에서 플레이스홀더를 제거합니다.</figcaption></figure><figure data-v-7c83aee7><img src="'+b+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7>네 번째 노드에서 플레이스홀더를 확인하고 &quot;?&quot;를 찾습니다. 플레이스홀더를 &quot;Edit Mapping&quot;으로 푸시하여 <code data-v-7c83aee7>prop2</code>를 플레이스홀더 노드에 연결합니다. 그런 다음 블록에서 플레이스홀더를 제거합니다.</figcaption></figure><figure data-v-7c83aee7><img src="'+f+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7>다섯 번째 노드에서 플레이스홀더를 확인하지만 아무것도 찾지 못했습니다. 이제 끝났습니다.</figcaption></figure><h3 id="더티-체킹" tabindex="-1" data-v-7c83aee7>더티 체킹 <a class="header-anchor" href="#더티-체킹" aria-label="Permalink to &quot;더티 체킹&quot;" data-v-7c83aee7>​</a></h3><p data-v-7c83aee7>Edit Map이 생성되면 더티 체킹 단계를 시작할 수 있습니다. 이 단계에서는 상태의 변경 사항을 확인하고 그에 따라 DOM을 업데이트합니다.</p><figure data-v-7c83aee7><img src="'+F+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7>모든 DOM 요소별로 차이점을 파악하는 대신 <code data-v-7c83aee7>prop1</code>과 <code data-v-7c83aee7>prop2</code>의 차이점만 파악할 수 있습니다. 둘 다 정적 분석 중에 생성한 &quot;Edit Mapping&quot;을 통해 각 노드에 연결되어 있으므로 차이점을 확인하면 DOM을 직접 업데이트할 수 있습니다.</figcaption></figure><figure data-v-7c83aee7><img src="'+A+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7>현재 <code data-v-7c83aee7>prop1</code>값과 새 <code data-v-7c83aee7>prop1</code>값이 다르기 때문에 DOM을 업데이트합니다.</figcaption></figure><figure data-v-7c83aee7><img src="'+M+'" width="100%" data-v-7c83aee7><figcaption data-v-7c83aee7>현재 <code data-v-7c83aee7>prop2</code>값과 새 <code data-v-7c83aee7>prop2</code>값이 다르기 때문에 DOM을 업데이트합니다.</figcaption></figure><p data-v-7c83aee7>더티 체킹 예제를 통해 이전의 비교 방식보다 훨씬 적은 계산이 필요하다는 것을 알 수 있습니다. 이는 더티 체킹 단계가 가상 DOM이 아닌 상태에만 관심을 갖기 때문입니다. 각 가상 노드는 변경 여부를 파악하기 위해 많은 수준의 재귀가 필요할 수 있지만, 상태는 얕은 비교만 수행하면 됩니다.</p><h2 id="이-기법은-효과적인가요" tabindex="-1" data-v-7c83aee7>이 기법은 효과적인가요? <a class="header-anchor" href="#이-기법은-효과적인가요" aria-label="Permalink to &quot;이 기법은 효과적인가요?&quot;" data-v-7c83aee7>​</a></h2><p data-v-7c83aee7><strong data-v-7c83aee7>네, 하지만 만병통치약은 아닙니다.</strong> <a href="https://krausest.github.io/js-framework-benchmark/2023/table_chrome_112.0.5615.49.html" target="_blank" rel="noreferrer" data-v-7c83aee7>(최신 벤치마크 보기)</a></p><img src="'+q+`" width="100%" data-v-7c83aee7><p data-v-7c83aee7>Million.js는 꽤 높은 성능을 자랑하며 자바스크립트 프레임워크 벤치마크에서 리액트를 능가합니다. 하지만 벤치마크에서 Million.js가 어떻게 더 빠를 수 있는지 이해하는 것이 중요합니다.</p><p data-v-7c83aee7>자바스크립트 프레임워크 벤치마크는 행과 열로 구성된 큰 테이블을 렌더링하여 프레임워크의 성능을 테스트하는 벤치마크입니다. 이 벤치마크는 1,000개의 행을 추가/교체하는 등 매우 비현실적인 성능 테스트를 위해 설계되었으며, 실제 애플리케이션을 반드시 대표하지는 않습니다.</p><p data-v-7c83aee7>그렇다면 Million.js 또는 블록 가상 DOM은 어디에 사용할 수 있을까요?</p><h2 id="정적-콘텐츠가-많고-동적-콘텐츠가-적은-경우" tabindex="-1" data-v-7c83aee7>정적 콘텐츠가 많고 동적 콘텐츠가 적은 경우 <a class="header-anchor" href="#정적-콘텐츠가-많고-동적-콘텐츠가-적은-경우" aria-label="Permalink to &quot;정적 콘텐츠가 많고 동적 콘텐츠가 적은 경우&quot;" data-v-7c83aee7>​</a></h2><p data-v-7c83aee7>블록 가상 DOM은 동적 콘텐츠가 적고 정적 콘텐츠가 많은 경우에 가장 적합합니다. 블록 가상 DOM의 가장 큰 장점은 가상 DOM의 정적 부분을 고려할 필요가 없기 때문에 많은 정적 콘텐츠를 건너뛸 수 있다면 매우 빠를 수 있다는 것입니다.</p><p data-v-7c83aee7>예를 들어, 이 경우 블록 가상 DOM은 일반 가상 DOM보다 훨씬 빠릅니다.</p><div class="language-jsx vp-adaptive-theme" data-v-7c83aee7><button title="Copy Code" class="copy" data-v-7c83aee7></button><span class="lang" data-v-7c83aee7>jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-7c83aee7><code data-v-7c83aee7><span class="line" data-v-7c83aee7><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-7c83aee7>// ✅ Good</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line highlighted" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;{dynamic}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>  수많은 정적 콘텐츠...</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span></code></pre></div><p data-v-7c83aee7>동적 콘텐츠가 많은 경우 블록 가상 DOM과 일반 가상 DOM 사이에 큰 차이가 없을 수 있습니다.</p><div class="language-jsx vp-adaptive-theme" data-v-7c83aee7><button title="Copy Code" class="copy" data-v-7c83aee7></button><span class="lang" data-v-7c83aee7>jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-7c83aee7><code data-v-7c83aee7><span class="line" data-v-7c83aee7><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-7c83aee7>// ❌ Bad</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line highlighted" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;{dynamic}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line highlighted" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;{dynamic}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line highlighted" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;{dynamic}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line highlighted" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;{dynamic}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line highlighted" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;{dynamic}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;</span></span></code></pre></div><p data-v-7c83aee7>관리 대시보드나 정적 콘텐츠가 많은 컴포넌트로 구성된 웹사이트를 구축하는 경우 블록 가상 DOM이 적합할 수 있습니다. 그러나 데이터 차이를 확인하는데 소요되는 계산이 가상 DOM 차이를 확인하는 계산보다 훨씬 큰 웹사이트를 구축하는 경우에는 큰 차이를 느끼지 못할 수도 있습니다.</p><p data-v-7c83aee7>예를 들어, 이 컴포넌트는 가상 DOM 노드 수보다 차이점을 비교해야 하는 데이터 값이 더 많으므로 블록 가상 DOM에 적합하지 <strong data-v-7c83aee7>않을 수</strong> 있습니다.</p><div class="language-jsx vp-adaptive-theme" data-v-7c83aee7><button title="Copy Code" class="copy" data-v-7c83aee7></button><span class="lang" data-v-7c83aee7>jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-7c83aee7><code data-v-7c83aee7><span class="line" data-v-7c83aee7><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-7c83aee7>// 5개의 데이터 값 차이</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-7c83aee7> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-7c83aee7>a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-7c83aee7>b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-7c83aee7>c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-7c83aee7>d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-7c83aee7>e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> }) {</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-7c83aee7>  // 1개의 가상 DOM 차이</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;{a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> e}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>}</span></span></code></pre></div><h3 id="안정된-ui-트리" tabindex="-1" data-v-7c83aee7>&quot;안정된&quot; UI 트리 <a class="header-anchor" href="#안정된-ui-트리" aria-label="Permalink to &quot;&quot;안정된&quot; UI 트리&quot;" data-v-7c83aee7>​</a></h3><p data-v-7c83aee7>블록 가상 DOM은 &quot;안정된&quot; UI 트리 또는 많이 변경되지 않는 UI 트리에도 적합합니다. Edit Map은 한 번만 생성되므로 렌더링할 때마다 다시 생성할 필요가 없기 때문입니다.</p><p data-v-7c83aee7>예를 들어 다음 컴포넌트는 블록 가상 DOM에 적합한 후보입니다.</p><div class="language-jsx vp-adaptive-theme" data-v-7c83aee7><button title="Copy Code" class="copy" data-v-7c83aee7></button><span class="lang" data-v-7c83aee7>jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-7c83aee7><code data-v-7c83aee7><span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-7c83aee7> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>() {</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-7c83aee7>  // ✅ 좋음, 결정론적/안정적인 반환이므로</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;{dynamic}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>}</span></span></code></pre></div><p data-v-7c83aee7>하지만 이 컴포넌트는 일반 가상 DOM보다 <em data-v-7c83aee7>느릴</em> 수 있습니다.</p><div class="language-jsx vp-adaptive-theme" data-v-7c83aee7><button title="Copy Code" class="copy" data-v-7c83aee7></button><span class="lang" data-v-7c83aee7>jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-7c83aee7><code data-v-7c83aee7><span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-7c83aee7> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>() {</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;" data-v-7c83aee7>  // ❌ 나쁨, 비결정적/불안정적이므로</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-7c83aee7>random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-7c83aee7> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;{dynamic}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;sad&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>}</span></span></code></pre></div><p data-v-7c83aee7>&quot;목록과 같은&quot; 형태를 따르는 비결정적/불안정적인 반환을 사용해야 하는 경우, <a href="https://million.dev/docs/quickstart#for-" target="_blank" rel="noreferrer" data-v-7c83aee7><code data-v-7c83aee7>&lt;For /&gt;</code></a> 컴포넌트를 사용하면 도움이 될 수 있습니다.</p><div class="language-jsx vp-adaptive-theme" data-v-7c83aee7><button title="Copy Code" class="copy" data-v-7c83aee7></button><span class="lang" data-v-7c83aee7>jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" data-v-7c83aee7><code data-v-7c83aee7><span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-7c83aee7> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>() {</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-7c83aee7>For</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;" data-v-7c83aee7> each</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>{items}&gt;{(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;" data-v-7c83aee7>item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;" data-v-7c83aee7>=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;{item}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;" data-v-7c83aee7>div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;}&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;" data-v-7c83aee7>For</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>&gt;;</span></span>
<span class="line" data-v-7c83aee7><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;" data-v-7c83aee7>}</span></span></code></pre></div><p data-v-7c83aee7>애플리케이션 UI를 구조화할 방법에 제한이 있다는 점에 유의하세요. &quot;안정적&quot; 반환은 목록과 같은 동적 모양이 아닌 컴포넌트(예: 동일한 컴포넌트 내의 조건부 반환)는 허용되지 않음을 의미합니다.</p><h3 id="세밀하게-사용하기" tabindex="-1" data-v-7c83aee7>세밀하게 사용하기 <a class="header-anchor" href="#세밀하게-사용하기" aria-label="Permalink to &quot;세밀하게 사용하기&quot;" data-v-7c83aee7>​</a></h3><p data-v-7c83aee7>초보자가 저지르는 큰 실수 중 하나는 블록 가상 DOM을 모든 곳에 사용하는 것입니다. 블록 가상 DOM은 만병통치약이 아니며 일반 가상 DOM보다 항상 빠른 것은 아니기 때문에 이는 좋지 않은 생각입니다.</p><p data-v-7c83aee7>대신 블록 가상 DOM이 더 빠른 특정 패턴을 인식해야 하고, 해당 경우에만 사용해야 합니다. 예를 들어 큰 테이블에는 블록 가상 DOM을 사용하지만, 정적 콘텐츠가 적은 작은 폼에는 일반 가상 DOM을 사용할 수 있습니다.</p><h2 id="마무리-생각" tabindex="-1" data-v-7c83aee7>마무리 생각 <a class="header-anchor" href="#마무리-생각" aria-label="Permalink to &quot;마무리 생각&quot;" data-v-7c83aee7>​</a></h2><p data-v-7c83aee7>블록 가상 DOM은 업데이트를 관리하고 오버헤드를 최소화하는 대안적인 접근 방식을 제공함으로써 가상 DOM 개념에 대한 새로운 관점을 제시합니다. 하지만 이런 잠재력에도 불구하고 이 접근 방식은 만능 솔루션이 아닙니다. 개발자는 먼저 애플리케이션의 특정 요구 사항과 성능 요구 사항을 평가한 후 이 접근 방식을 도입할지 결정해야 합니다.</p><p data-v-7c83aee7>많은 애플리케이션의 경우 기존 가상 DOM으로 충분할 수 있으며 블록 가상 DOM이나 기타 성능 중심 프레임워크로 전환할 필요가 없을 수도 있습니다. 애플리케이션이 대부분의 기기에서 성능 문제없이 원활하게 실행된다면 다른 프레임워크로 전환하는 데 시간과 노력을 들일 필요가 없을 수도 있습니다. 기술 스택을 크게 변경하기 전에 장단점을 면밀히 검토하고 애플리케이션의 고유한 요구 사항을 평가하는 것이 중요합니다.</p><p data-v-7c83aee7>그렇지만 저는 앞으로의 미래가 기대됩니다. 여러분도 기대되시나요? (<a href="https://github.com/aidenybai/hundred#readme" target="_blank" rel="noreferrer" data-v-7c83aee7>직접 구축해 보세요!</a>)</p><p data-v-7c83aee7><a href="https://twitter.com/search?q=https%3A%2F%2Fmillion.dev%2Fblog%2Fvirtual-dom" target="_blank" rel="noreferrer" data-v-7c83aee7>트위터에서 토론하기</a> | <a href="https://github.com/aidenybai/million/blob/main/website/pages/blog/virtual-dom.mdx" target="_blank" rel="noreferrer" data-v-7c83aee7>깃허브에서 수정하기</a></p><h3 id="감사" tabindex="-1" data-v-7c83aee7>감사 <a class="header-anchor" href="#감사" aria-label="Permalink to &quot;감사&quot;" data-v-7c83aee7>​</a></h3><ul data-v-7c83aee7><li data-v-7c83aee7>아이디어를 제안해 준 <a href="https://twitter.com/sebastienlorber" target="_blank" rel="noreferrer" data-v-7c83aee7>Seb Lorber</a></li><li data-v-7c83aee7>이 글을 읽고 편집을 도와준 <a href="https://twitter.com/JessePence5" target="_blank" rel="noreferrer" data-v-7c83aee7>Jesse Pense</a></li><li data-v-7c83aee7><a href="https://twitter.com/jutanium/status/1652907080330665984" target="_blank" rel="noreferrer" data-v-7c83aee7>2023년 가장 빠른 투자</a>를 한 <a href="https://twitter.com/jutanium" target="_blank" rel="noreferrer" data-v-7c83aee7>Dan Jutan</a></li><li data-v-7c83aee7><a href="https://twitter.com/Rich_Harris" target="_blank" rel="noreferrer" data-v-7c83aee7>Rich Harris</a>의 <a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead" target="_blank" rel="noreferrer" data-v-7c83aee7>&quot;가상 DOM은 순수한 오버헤드입니다&quot;</a></li><li data-v-7c83aee7><a href="https://twitter.com/dan_abramov" target="_blank" rel="noreferrer" data-v-7c83aee7>Dan Abramov</a>의 <a href="https://overreacted.io/ko/react-as-a-ui-runtime/" target="_blank" rel="noreferrer" data-v-7c83aee7>&quot;UI 런타임으로서의 리액트&quot;</a></li><li data-v-7c83aee7><a href="https://twitter.com/RyanCarniato" target="_blank" rel="noreferrer" data-v-7c83aee7>Ryan Carniato</a>의 <a href="https://dev.to/this-is-learning/components-are-pure-overhead-hpm" target="_blank" rel="noreferrer" data-v-7c83aee7>&quot;컴포넌트는 순수한 오버헤드입니다&quot;</a></li><li data-v-7c83aee7><a href="https://twitter.com/chungwu" target="_blank" rel="noreferrer" data-v-7c83aee7>Chung Wu</a>의 <a href="https://www.plasmic.app/blog/how-react-server-components-work" target="_blank" rel="noreferrer" data-v-7c83aee7>&quot;리액트 서버 컴포넌트 작동 방식: 심층 가이드&quot;</a></li></ul>`,54))])}const U=l(O,[["render",C],["__scopeId","data-v-7c83aee7"]]);export{I as __pageData,U as default};
