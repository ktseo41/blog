import{_ as a,c as e,o as t,a3 as l}from"./chunks/framework.CkeeKVuI.js";const _=JSON.parse('{"title":"Chapter 10 - 문서자료","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"study/google-engineer/chapter10.md","filePath":"study/google-engineer/chapter10.md","lastUpdated":1718098959000}'),d={name:"study/google-engineer/chapter10.md"},i=l('<h1 id="chapter-10-문서자료" tabindex="-1" data-v-fe257a57>Chapter 10 - 문서자료 <a class="header-anchor" href="#chapter-10-문서자료" aria-label="Permalink to &quot;Chapter 10 - 문서자료&quot;" data-v-fe257a57>​</a></h1><br data-v-fe257a57><h4 id="문서자료는-코드와-같다" tabindex="-1" data-v-fe257a57>문서자료는 코드와 같다. <a class="header-anchor" href="#문서자료는-코드와-같다" aria-label="Permalink to &quot;문서자료는 코드와 같다.&quot;" data-v-fe257a57>​</a></h4><ul data-v-fe257a57><li data-v-fe257a57>따라야 하는 내부 정책과 규칙이 있어야 한다.</li><li data-v-fe257a57>버전 관리 시스템에 등록해 관리해야 한다.</li><li data-v-fe257a57>관리 책임자를 명시해야 한다.</li><li data-v-fe257a57>주기적으로 평가(혹은 테스트)를 받아야 한다.</li></ul><h4 id="구글-위키-사례" tabindex="-1" data-v-fe257a57>구글 위키 사례 <a class="header-anchor" href="#구글-위키-사례" aria-label="Permalink to &quot;구글 위키 사례&quot;" data-v-fe257a57>​</a></h4><ul data-v-fe257a57><li data-v-fe257a57>오래된 정보를 그대로 담고 있었습니다. 중복된 페이지들이 나타났습니다. 몇 개만이 제대로 유지보수되고 있었고, 대부분은 특정 권한이 있고 몇가지 가정을 충족하는 팀만을 위한 안내였습니다.</li></ul><div class="comment" data-v-fe257a57>구글도 쉽지 않았다는 것에 위안도 된다.</div><h4 id="독자를-알자" tabindex="-1" data-v-fe257a57>독자를 알자 <a class="header-anchor" href="#독자를-알자" aria-label="Permalink to &quot;독자를 알자&quot;" data-v-fe257a57>​</a></h4><ul data-v-fe257a57><li data-v-fe257a57>완벽할 필요는 없습니다. 테스트와 같이 엔지니어들이 지켜야 할 프로세스를 설명하는 글을 쓴다고 생각해보세요.</li><li data-v-fe257a57>독자 유형 <ul data-v-fe257a57><li data-v-fe257a57>경험 수준: 전문 프로그래머, 초보 엔지니어</li><li data-v-fe257a57>도메인 지식: 팀원, 혹은 최종 API 정도에만 친숙한 사내 다른 엔지니어</li><li data-v-fe257a57>목적: 급히 정보를 수행해야하거나 정보를 얻어야 하는 최종 사용자, 혹은 꼬여있는 특정 구현마저 기꺼이 책임지려 하는 소프트웨어 전문가</li></ul></li><li data-v-fe257a57>대부분의 경우 가능한 한 모든 독자에게 적합한 방식으로 쓰는 것이 하나의 요령입니다.</li><li data-v-fe257a57>핵심은 균형을 잘 잡는 것입니다. 치트키는 없습니다.</li><li data-v-fe257a57>하지만 &#39;짧게&#39; 쓰는 게 유리하다는 사실을 알아냈습니다.</li></ul><div class="comment" data-v-fe257a57>독자의 유형을 구분해서 생각한다면 도움이 될 것 같다.</div><div class="comment" data-v-fe257a57>짧게는 문서에서도 유리하다.</div><ul data-v-fe257a57><li data-v-fe257a57>독자 구분 <ul data-v-fe257a57><li data-v-fe257a57>탐색자: 원하는 것을 정확히 알고, 정보를 찾는 엔지니어. 이런 독자에게는 일관성이 핵심</li><li data-v-fe257a57>배회자: 무엇을 원하는지를 정확하게 알지 못하는 사람, 맡겨진 기능을 어떻게 구현해야 할지에 대해 어슴푸레한 아이디어만 가지고 있을 것. 이런 독자에게는 명료한 글이 효과적</li></ul></li></ul><h4 id="설계-문서" tabindex="-1" data-v-fe257a57>설계 문서 <a class="header-anchor" href="#설계-문서" aria-label="Permalink to &quot;설계 문서&quot;" data-v-fe257a57>​</a></h4><ul data-v-fe257a57><li data-v-fe257a57>소프트웨어 엔지니어들은 일반적으로 팀에서 승인한 특정 템플릿을 이용해서 설계 문서 초안을 작성합니다.</li></ul><div class="comment" data-v-fe257a57>기술자문 이후 Vue3, React와 같은 기술 스택이 정해졌다면, 구체적으로 어떤 라이브러리, 디렉토리 구조, 컴포넌트, 컴포넌트간 데이터 흐름등 조금 더 깊은 설계를 해보는 것도 좋을 것 같다.</div><h4 id="문서자료-리뷰" tabindex="-1" data-v-fe257a57>문서자료 리뷰 <a class="header-anchor" href="#문서자료-리뷰" aria-label="Permalink to &quot;문서자료 리뷰&quot;" data-v-fe257a57>​</a></h4><ul data-v-fe257a57><li data-v-fe257a57>문서자료 역시 리뷰를 거쳐야 합니다. 크게 세 가지입니다. 각각은 서로 다른 측면을 중점적으로 살핍니다. <ul data-v-fe257a57><li data-v-fe257a57>정확성</li><li data-v-fe257a57>명확성</li><li data-v-fe257a57>일관성</li></ul></li></ul><div class="comment" data-v-fe257a57>주석에도 위와같은 면을 살핀다면 더 좋은 주석을 작성할 수 있을까?</div><h4 id="문서화-철학" tabindex="-1" data-v-fe257a57>문서화 철학 <a class="header-anchor" href="#문서화-철학" aria-label="Permalink to &quot;문서화 철학&quot;" data-v-fe257a57>​</a></h4><ul data-v-fe257a57><li data-v-fe257a57>어떻게에만 매몰되지 말고, &#39;누가&#39; &#39;무엇을&#39; &#39;언제&#39; &#39;어디서&#39; &#39;왜&#39;도 고려하자</li><li data-v-fe257a57>시작, 중간, 끝처럼 문서에 절을 추가하는 것을 두려워하지 말자</li></ul><h4 id="핵심-정리" tabindex="-1" data-v-fe257a57>핵심 정리 <a class="header-anchor" href="#핵심-정리" aria-label="Permalink to &quot;핵심 정리&quot;" data-v-fe257a57>​</a></h4><ul data-v-fe257a57><li data-v-fe257a57>문서자료는 시간이 흐르고 조직 규모가 커질수록 더 중요해집니다.</li><li data-v-fe257a57>문서자료 변경도 기존 개발자 워크플로에 통합되어야 합니다.</li><li data-v-fe257a57>하나의 문서는 하나의 목적에 집중해야 합니다.</li><li data-v-fe257a57>문서자료는 자신이 아니라 독자를 위해 써야 합니다.</li></ul><h2 id="느낀-점" tabindex="-1" data-v-fe257a57>느낀 점 <a class="header-anchor" href="#느낀-점" aria-label="Permalink to &quot;느낀 점&quot;" data-v-fe257a57>​</a></h2><ul data-v-fe257a57><li data-v-fe257a57>코드 주석 외에 작성해야할 어떤 문서가 있을지 구체적인 상상이 안간다. Next.js나 CloudFlare, Claude의 문서를 떠올리면 될까? 아니면 기타 NPM 패키지들? 그런 문서를 우리 회사에서 작성해야하나? 최근에는 기술자문이 생겼다.</li></ul>',24),f=[i];function r(v,o,h,n,c,s){return t(),e("div",null,f)}const m=a(d,[["render",r],["__scopeId","data-v-fe257a57"]]);export{_ as __pageData,m as default};
