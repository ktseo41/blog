import{_ as s,D as n,c as l,I as e,w as c,j as a,a as t,a3 as o,o as d}from"./chunks/framework.8eP_U0YV.js";const W=JSON.parse('{"title":"Brilliant (✘)","description":"","frontmatter":{},"headers":[],"relativePath":"study/Brilliant.md","filePath":"study/Brilliant.md","lastUpdated":1665586137000}'),u={name:"study/Brilliant.md"},m=a("h1",{id:"brilliant-✘",tabindex:"-1"},[a("a",{href:"https://brilliant.org/home/",target:"_blank",rel:"noreferrer"},"Brilliant"),t(" (✘) "),a("a",{class:"header-anchor",href:"#brilliant-✘","aria-label":'Permalink to "[Brilliant](https://brilliant.org/home/) (✘)"'},"​")],-1),b=a("blockquote",null,[a("p",null,"중단")],-1),p=a("br",null,null,-1),g=o('<h2 id="computer-science-foundations" tabindex="-1"><a href="https://brilliant.org/paths/computer-science-foundations/" target="_blank" rel="noreferrer">Computer Science Foundations</a> <a class="header-anchor" href="#computer-science-foundations" aria-label="Permalink to &quot;[Computer Science Foundations](https://brilliant.org/paths/computer-science-foundations/)&quot;">​</a></h2><p>컴퓨터 과학의 핵심 아이디어에서 시작하여 알고리즘과 신경망으로 진행합니다.</p><h3 id="computer-science-fundamentals" tabindex="-1">Computer Science Fundamentals <a class="header-anchor" href="#computer-science-fundamentals" aria-label="Permalink to &quot;Computer Science Fundamentals&quot;">​</a></h3>',3),f=a("h4",{id:"order-and-search",tabindex:"-1"},[t("Order and Search "),a("a",{class:"header-anchor",href:"#order-and-search","aria-label":'Permalink to "Order and Search"'},"​")],-1),_=a("h5",{id:"ancient-search-technology",tabindex:"-1"},[t("Ancient Search Technology "),a("a",{class:"header-anchor",href:"#ancient-search-technology","aria-label":'Permalink to "Ancient Search Technology"'},"​")],-1),q=a("p",null,[t("사서는 책을 저자, 제목, 주제별로 찾을 수 있는 방법이 필요했습니다. 하지만 책장에서 책은 한 가지 방법으로만 정렬할 수 있습니다. 사서들은 이 문제를 해결하기 위해 수세기 전에 한 방법을 만들어 냈습니다. 바로 "),a("strong",null,"카드 카탈로그"),t("를 이용하는 것입니다.")],-1),k=a("a",{href:"https://brilliant.org/courses/computer-science-essentials/",target:"_blank"},"출처 : Brilliant",-1),P=o('<br><p>카드 카탈로그의 <strong>색인</strong> 카드는 해당 책을 빠르게 찾을 수 있는 번호를 포함해 책에 대한 모든 주요 정보를 포함하고 있습니다. 만약 카드를 저자별로 묶어놓는다면 우리가 톨스토이의 책을 찾으려고 할 때 빠르게 찾을 수 있습니다. 저자에 따른 정렬만이 아니라 제목, 출판일 등등 도서관을 이용객에게 중요한 정보별로 어떤 것이든 이용할 수 있습니다.</p><p>일반적으로 컴퓨터를 이용해 아주 많은 양의 데이터를 검색해야할 때, 아래 두 가지 방법 중 하나를 수행하게 됩니다.</p><ul><li>모든 데이터를 하나씩 탐색하는 것. 컴퓨터는 이 작업을 아주 빠르게 수행할 수 있습니다. 특히, 병렬로 작업을 수행할 때요.</li><li>별도의 목록을 탐색하는 것 - 즉, <strong>Index</strong> - 유용한 순서로 정렬돼있습니다. 마치 카드 카탈로그처럼요.</li></ul><h5 id="where-should-we-put-books" tabindex="-1">Where Should We Put Books? <a class="header-anchor" href="#where-should-we-put-books" aria-label="Permalink to &quot;Where Should We Put Books?&quot;">​</a></h5><p>또 다른 문제</p><p>만약 책장에 책이 꽉 차있는데, 중간에 다른 책을 추가해야한다면? 많은 책을 움직여야 합니다.</p><p>이 문제를 해결하기 위해 사서들은 책장에 추가적인 공간을 남겨두는 방식을 사용합니다.</p><p>하지면 여전히 문제는 존재합니다. 남겨둔 공간이 낭비되는 것이죠.</p><h5 id="who-cares-where-we-put-the-books" tabindex="-1">Who Cares Where We put the Books? <a class="header-anchor" href="#who-cares-where-we-put-the-books" aria-label="Permalink to &quot;Who Cares Where We put the Books?&quot;">​</a></h5><p>공간을 절약할 수 있는 또 다른 현대적인 방법이 있습니다.</p><p>책을 아무곳에나 두는 겁니다. 컴퓨터 시스템만이 책의 장소를 기억하는 거죠.</p><h4 id="naming" tabindex="-1">Naming <a class="header-anchor" href="#naming" aria-label="Permalink to &quot;Naming&quot;">​</a></h4><p>이 것이 우리 시스템의 주요 문제점입니다. 이름을 알기 위해서는 이름을 알아야합니다.</p><p>Beemesh 시스템은 모든 디바이스가 생산될 때부터 central authority의 주소를 알도록 했습니다. 컴퓨터가 제일 처음 Beemesh에 연결될 때 이미 <code>TOWN-HALL</code>의 주소를 알고 있게 되는 것이죠.</p><p>사실, 이건 인터넷이 작동하는 방식과 매우 흡사합니다. 우리의 컴퓨터는 인터넷에 연결되기 전부터 central naming authority의 주소를 알고 있습니다.</p><h4 id="abstraction" tabindex="-1">Abstraction <a class="header-anchor" href="#abstraction" aria-label="Permalink to &quot;Abstraction&quot;">​</a></h4><p>시청의 컴퓨터를 작동시키는 비용은 1시간에 2센트입니다. 이 계산에 따르면 Sophia의 느린 Python 프로그램을 900번 돌리는 비용은 35센트입니다.</p><p>Sophia의 시급은 50달러입니다. 그리고 Sophia가 더 빠른 알고리즘으로 프로그램을 개선하는데는 2시간이 걸립니다.</p><p>프로그램 개선이 더 저렴한 방법이 되기 위해서는 프로그램을 몇번이나 돌려야할까요?</p><h4 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h4><p>Jing 시장의 요청을 수행하기 위한 3가지 다른 방법을 알아봤습니다. 하지만 Jing 시장의 입장에서는 이 셋이 모두 같은 <strong>Interface</strong>를 가지고 있었습니다. 그녀는 항상 Records Office를 통해 Fire Department 메모들을 요청했을 뿐이었습니다.</p><p>Jing 시장에게서 감춰진 영역이 있어서 신경쓰이게 하지 않고 다른 방법을 사용하도록 바꿀 수 있었습니다. 인터페이스에서 중요한 부분 중 하나입니다.</p><h3 id="algorithm-fundamentals" tabindex="-1">Algorithm Fundamentals <a class="header-anchor" href="#algorithm-fundamentals" aria-label="Permalink to &quot;Algorithm Fundamentals&quot;">​</a></h3>',24),x=o('<h4 id="building-blocks" tabindex="-1">Building Blocks <a class="header-anchor" href="#building-blocks" aria-label="Permalink to &quot;Building Blocks&quot;">​</a></h4><h5 id="pseudocode" tabindex="-1">Pseudocode <a class="header-anchor" href="#pseudocode" aria-label="Permalink to &quot;Pseudocode&quot;">​</a></h5><h5 id="conditional-algorithms" tabindex="-1">Conditional Algorithms <a class="header-anchor" href="#conditional-algorithms" aria-label="Permalink to &quot;Conditional Algorithms&quot;">​</a></h5><h5 id="manipulating-numbers" tabindex="-1">Manipulating Numbers <a class="header-anchor" href="#manipulating-numbers" aria-label="Permalink to &quot;Manipulating Numbers&quot;">​</a></h5><h5 id="repetition" tabindex="-1">Repetition <a class="header-anchor" href="#repetition" aria-label="Permalink to &quot;Repetition&quot;">​</a></h5><h5 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-label="Permalink to &quot;Arrays&quot;">​</a></h5><h4 id="array-algorithms" tabindex="-1">Array Algorithms <a class="header-anchor" href="#array-algorithms" aria-label="Permalink to &quot;Array Algorithms&quot;">​</a></h4><h5 id="searching-an-array" tabindex="-1">Searching an Array <a class="header-anchor" href="#searching-an-array" aria-label="Permalink to &quot;Searching an Array&quot;">​</a></h5><h5 id="binary-search" tabindex="-1">Binary Search <a class="header-anchor" href="#binary-search" aria-label="Permalink to &quot;Binary Search&quot;">​</a></h5><h5 id="sorting-an-array" tabindex="-1">Sorting an Array <a class="header-anchor" href="#sorting-an-array" aria-label="Permalink to &quot;Sorting an Array&quot;">​</a></h5><h5 id="insertion-sort" tabindex="-1">Insertion Sort <a class="header-anchor" href="#insertion-sort" aria-label="Permalink to &quot;Insertion Sort&quot;">​</a></h5><p>Selection Sort는 정렬되지 않은 영역을 반복적으로 스캔해 swap을 최소화 합니다.</p><p>Insertion Sort는 필요하지 않은 스캔을 줄이고 대신 swap 횟수를 늘립니다</p><h4 id="the-speed-of-algorithms" tabindex="-1">The Speed of Algorithms <a class="header-anchor" href="#the-speed-of-algorithms" aria-label="Permalink to &quot;The Speed of Algorithms&quot;">​</a></h4><h5 id="timing-programs-with-a-stopwatch" tabindex="-1">Timing Programs with a Stopwatch <a class="header-anchor" href="#timing-programs-with-a-stopwatch" aria-label="Permalink to &quot;Timing Programs with a Stopwatch&quot;">​</a></h5><h5 id="counting-operations" tabindex="-1">Counting Operations <a class="header-anchor" href="#counting-operations" aria-label="Permalink to &quot;Counting Operations&quot;">​</a></h5><h5 id="best-worst-and-average-case" tabindex="-1">Best, Worst and Average Case <a class="header-anchor" href="#best-worst-and-average-case" aria-label="Permalink to &quot;Best, Worst and Average Case&quot;">​</a></h5><h5 id="comparing-algorithms" tabindex="-1">Comparing Algorithms <a class="header-anchor" href="#comparing-algorithms" aria-label="Permalink to &quot;Comparing Algorithms&quot;">​</a></h5><h5 id="understanding-big-o" tabindex="-1">Understanding Big O <a class="header-anchor" href="#understanding-big-o" aria-label="Permalink to &quot;Understanding Big O&quot;">​</a></h5><h5 id="the-mathmatcis-of-big-o" tabindex="-1">The Mathmatcis of Big O <a class="header-anchor" href="#the-mathmatcis-of-big-o" aria-label="Permalink to &quot;The Mathmatcis of Big O&quot;">​</a></h5><h4 id="stable-matching" tabindex="-1">Stable Matching <a class="header-anchor" href="#stable-matching" aria-label="Permalink to &quot;Stable Matching&quot;">​</a></h4><h5 id="the-stable-matching-problem" tabindex="-1">The Stable Matching Problem <a class="header-anchor" href="#the-stable-matching-problem" aria-label="Permalink to &quot;The Stable Matching Problem&quot;">​</a></h5><h5 id="using-greediness" tabindex="-1">Using Greediness <a class="header-anchor" href="#using-greediness" aria-label="Permalink to &quot;Using Greediness&quot;">​</a></h5><h4 id="deferred-acceptance-algorithm" tabindex="-1">Deferred Acceptance Algorithm <a class="header-anchor" href="#deferred-acceptance-algorithm" aria-label="Permalink to &quot;Deferred Acceptance Algorithm&quot;">​</a></h4><h4 id="correctness" tabindex="-1">Correctness <a class="header-anchor" href="#correctness" aria-label="Permalink to &quot;Correctness&quot;">​</a></h4><h4 id="termination" tabindex="-1">Termination <a class="header-anchor" href="#termination" aria-label="Permalink to &quot;Termination&quot;">​</a></h4><h4 id="running-time" tabindex="-1">Running Time <a class="header-anchor" href="#running-time" aria-label="Permalink to &quot;Running Time&quot;">​</a></h4><h4 id="variants" tabindex="-1">Variants <a class="header-anchor" href="#variants" aria-label="Permalink to &quot;Variants&quot;">​</a></h4><ul><li>Gale-Shapley 알고리즘을 현실적인 문제에 맞춰 수정 <ul><li>자리가 2개 이상인 병원</li><li>자리와 후보의 수가 불일치</li></ul></li></ul><ul><li>이상적인 조건에서 우선적으로 알고리즘을 만들고 현실에 맞춰 수정하는 과정</li></ul><h4 id="who-benefits" tabindex="-1">Who Benefits? <a class="header-anchor" href="#who-benefits" aria-label="Permalink to &quot;Who Benefits?&quot;">​</a></h4><h3 id="data-structures" tabindex="-1">Data Structures <a class="header-anchor" href="#data-structures" aria-label="Permalink to &quot;Data Structures&quot;">​</a></h3>',32),S=a("h3",{id:"introduction-to-neural-networks",tabindex:"-1"},[t("Introduction to Neural Networks "),a("a",{class:"header-anchor",href:"#introduction-to-neural-networks","aria-label":'Permalink to "Introduction to Neural Networks"'},"​")],-1);function A(T,y,B,w,C,I){const i=n("StreakOnDay"),r=n("ProgressBar"),h=n("ImageWithCaption");return d(),l("div",null,[m,b,p,e(i,{streak:0,complete:42}),g,e(r,{name:"Computer Science Fundamentals",max:15,value:15}),f,_,q,e(h,{src:"https://i.imgur.com/VGDRMvc.jpg",alt:"card-catalog"},{figcaption:c(()=>[k]),_:1}),P,e(r,{name:"Algorithm Fundamentals",max:23,value:17}),x,e(r,{name:"Data Structures",max:100,value:0}),S,e(r,{name:"Introduction to Neural Networks",max:100,value:0})])}const v=s(u,[["render",A]]);export{W as __pageData,v as default};
