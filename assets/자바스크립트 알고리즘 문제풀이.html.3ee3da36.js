import{_ as o,r as s,o as c,c as l,a as n,b as a,F as r,d as p,e as u}from"./app.3799c3e6.js";const i={},k={id:"\u110C\u1161\u1107\u1161\u1109\u1173\u110F\u1173\u1105\u1175\u11B8\u1110\u1173-\u110B\u1161\u11AF\u1100\u1169\u1105\u1175\u110C\u1173\u11B7-\u1106\u116E\u11AB\u110C\u1166\u1111\u116E\u11AF\u110B\u1175",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#\u110C\u1161\u1107\u1161\u1109\u1173\u110F\u1173\u1105\u1175\u11B8\u1110\u1173-\u110B\u1161\u11AF\u1100\u1169\u1105\u1175\u110C\u1173\u11B7-\u1106\u116E\u11AB\u110C\u1166\u1111\u116E\u11AF\u110B\u1175","aria-hidden":"true"},"#",-1),m=p(),d={href:"https://www.inflearn.com/course/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4",target:"_blank",rel:"noopener noreferrer"},h=p("\uC790\uBC14\uC2A4\uD06C\uB9BD\uD2B8 \uC54C\uACE0\uB9AC\uC998 \uBB38\uC81C\uD480\uC774"),f=u(`<blockquote><p>\uCF54\uB529 \uBB38\uC81C\uB97C \uD480\uAE30 \uC704\uD574 \uBC30\uC6B0\uB294 \uAC83\uC774 \uC544\uB2C8\uB77C, \uCD1D\uC54C\uC744 \uC313\uC544\uB450\uB4EF\uC774 \uBB38\uC81C \uD574\uACB0 \uBC29\uBC95 \uC9C0\uC2DD\uC744 \uC313\uC544\uB450\uAE30 \uC704\uD574\uC11C \uACF5\uBD80\uD558\uB294 \uAC83\uC774\uB2E4.</p></blockquote><blockquote><p>\uD55C \uC54C\uACE0\uB9AC\uC998 \uCE74\uD14C\uACE0\uB9AC\uAC00 \uB098\uC624\uBA74, \uC720\uD29C\uBE0C\uC5D0\uC11C \uB2E4\uB978 \uC811\uADFC \uBC29\uC2DD\uB3C4 \uCC3E\uC544\uBCF4\uC790</p></blockquote><blockquote><p>\uC815\uD574\uC9C4 \uD574\uACB0\uBC95\uC774 \uC788\uB294 \uAC83\uC774 \uC544\uB2C8\uB2E4.</p></blockquote><h2 id="\u1100\u1175\u1107\u1169\u11AB\u1106\u116E\u11AB\u110C\u1166-\u1111\u116E\u11AF\u110B\u1175" tabindex="-1"><a class="header-anchor" href="#\u1100\u1175\u1107\u1169\u11AB\u1106\u116E\u11AB\u110C\u1166-\u1111\u116E\u11AF\u110B\u1175" aria-hidden="true">#</a> \uAE30\uBCF8\uBB38\uC81C \uD480\uC774</h2><h3 id="_1-\u1109\u1166-\u1109\u116E-\u110C\u116E\u11BC-\u110E\u116C\u1109\u1169\u11BA\u1100\u1161\u11B9" tabindex="-1"><a class="header-anchor" href="#_1-\u1109\u1166-\u1109\u116E-\u110C\u116E\u11BC-\u110E\u116C\u1109\u1169\u11BA\u1100\u1161\u11B9" aria-hidden="true">#</a> 1. \uC138 \uC218 \uC911 \uCD5C\uC19F\uAC12</h3><p>\uB0B4 \uBB38\uC81C \uD480\uC774</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;=</span> c<span class="token punctuation">)</span> <span class="token keyword">return</span> a
  <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&lt;=</span> a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> c<span class="token punctuation">)</span> <span class="token keyword">return</span> b
  <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> a <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> c
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\uC120\uC0DD\uB2D8 \uBB38\uC81C \uD480\uC774*</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> answer<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span> answer<span class="token operator">=</span>a<span class="token punctuation">;</span>
    <span class="token keyword">else</span> answer<span class="token operator">=</span>b<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&lt;</span>answer<span class="token punctuation">)</span> answer<span class="token operator">=</span>c<span class="token punctuation">;</span> 
    <span class="token keyword">return</span> answer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>\uB2E8\uACC4\uB97C \uB098\uB220\uC11C a, b\uC640 \uBE44\uAD50 / \uADF8 \uAC12\uACFC c\uC640 \uBE44\uAD50 \uB97C \uD558\uB294 \uAC83\uC774 \uB354 \uD3B8\uD574\uBCF4\uC778\uB2E4.</li></ul><h3 id="_2-\u1109\u1161\u11B7\u1100\u1161\u11A8\u1112\u1167\u11BC-\u1111\u1161\u11AB\u1107\u1167\u11AF\u1112\u1161\u1100\u1175" tabindex="-1"><a class="header-anchor" href="#_2-\u1109\u1161\u11B7\u1100\u1161\u11A8\u1112\u1167\u11BC-\u1111\u1161\u11AB\u1107\u1167\u11AF\u1112\u1161\u1100\u1175" aria-hidden="true">#</a> 2. \uC0BC\uAC01\uD615 \uD310\uBCC4\uD558\uAE30</h3><p>\uB0B4 \uBB38\uC81C \uD480\uC774</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">let</span> longest<span class="token punctuation">;</span>
<span class="token keyword">let</span> elseSum<span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
  longest <span class="token operator">=</span> a<span class="token punctuation">;</span>
  elseSum <span class="token operator">=</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  longest <span class="token operator">=</span> b<span class="token punctuation">;</span>
  elseSum <span class="token operator">=</span> a <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">&gt;</span> longest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  longest <span class="token operator">=</span> c<span class="token punctuation">;</span>
  elseSum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>longest <span class="token operator">&lt;</span> elseSum<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;TRUE&#39;</span>

<span class="token keyword">return</span> <span class="token string">&#39;FALSE&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li>a + b + c \uC5D0\uC11C longest\uB97C \uBE7C\uBA74 \uB410\uB2E4.</li></ul><h3 id="_3-\u110B\u1167\u11AB\u1111\u1175\u11AF\u1100\u1162\u1109\u116E" tabindex="-1"><a class="header-anchor" href="#_3-\u110B\u1167\u11AB\u1111\u1175\u11AF\u1100\u1162\u1109\u116E" aria-hidden="true">#</a> 3. \uC5F0\uD544\uAC1C\uC218</h3><ul><li>Math \uD568\uC218\uC5D0 \uB300\uD574\uC11C \uC54C\uB77C\uB294 \uB0B4\uC6A9\uC774\uC5C8\uC74C</li></ul><h3 id="_4-1\u1107\u116E\u1110\u1165-n\u1101\u1161\u110C\u1175\u110B\u1174-\u1112\u1161\u11B8" tabindex="-1"><a class="header-anchor" href="#_4-1\u1107\u116E\u1110\u1165-n\u1101\u1161\u110C\u1175\u110B\u1174-\u1112\u1161\u11B8" aria-hidden="true">#</a> 4. 1\uBD80\uD130 N\uAE4C\uC9C0\uC758 \uD569</h3><ul><li>for \uBB38</li></ul><h3 id="_5-\u110E\u116C\u1109\u1169\u11BA\u1100\u1161\u11B9-\u1100\u116E\u1112\u1161\u1100\u1175" tabindex="-1"><a class="header-anchor" href="#_5-\u110E\u116C\u1109\u1169\u11BA\u1100\u1161\u11B9-\u1100\u116E\u1112\u1161\u1100\u1175" aria-hidden="true">#</a> 5. \uCD5C\uC19F\uAC12 \uAD6C\uD558\uAE30</h3><p>\uB0B4 \uBB38\uC81C \uD480\uC774</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         
<span class="token keyword">let</span> min<span class="token punctuation">;</span>

arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> min <span class="token operator">=</span> num<span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> min <span class="token operator">=</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">return</span> min<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_6-\u1112\u1169\u11AF\u1109\u116E" tabindex="-1"><a class="header-anchor" href="#_6-\u1112\u1169\u11AF\u1109\u116E" aria-hidden="true">#</a> 6. \uD640\uC218</h3><p>\uB0B4 \uBB38\uC81C \uD480\uC774</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> answers <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>answers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>answers<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">solution</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">solution</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_7-10\u1107\u116E\u110C\u1166" tabindex="-1"><a class="header-anchor" href="#_7-10\u1107\u116E\u110C\u1166" aria-hidden="true">#</a> 7. 10\uBD80\uC81C</h3><ul><li>\uCD9C\uC81C \uC758\uB3C4\uB294?</li></ul><h3 id="_8-\u110B\u1175\u11AF\u1100\u1169\u11B8\u1102\u1161\u11AB\u110C\u1162\u11BC\u110B\u1175" tabindex="-1"><a class="header-anchor" href="#_8-\u110B\u1175\u11AF\u1100\u1169\u11B8\u1102\u1161\u11AB\u110C\u1162\u11BC\u110B\u1175" aria-hidden="true">#</a> 8. \uC77C\uACF1\uB09C\uC7C1\uC774</h3><p>\uB0B4 \uBB38\uC81C \uD480\uC774</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">firstNum</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> restArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">!==</span> firstNum<span class="token punctuation">)</span>

    restArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">secondNum</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> lastArr <span class="token operator">=</span> restArr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">num2</span> <span class="token operator">=&gt;</span> num2 <span class="token operator">!==</span> secondNum<span class="token punctuation">)</span>

      <span class="token keyword">const</span> sumOfLastArr <span class="token operator">=</span> lastArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>

      <span class="token keyword">const</span> key <span class="token operator">=</span> lastArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>

      <span class="token keyword">if</span><span class="token punctuation">(</span>sumOfLastArr <span class="token operator">!==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mapper<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> mapper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> sumOfLastArr<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>mapper<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="_9-a\u1105\u1173\u11AF-\u110B\u1173\u1105\u1169" tabindex="-1"><a class="header-anchor" href="#_9-a\u1105\u1173\u11AF-\u110B\u1173\u1105\u1169" aria-hidden="true">#</a> 9. A\uB97C #\uC73C\uB85C</h3><h3 id="_10-\u1106\u116E\u11AB\u110C\u1161-\u110E\u1161\u11BD\u1100\u1175" tabindex="-1"><a class="header-anchor" href="#_10-\u1106\u116E\u11AB\u110C\u1161-\u110E\u1161\u11BD\u1100\u1175" aria-hidden="true">#</a> 10. \uBB38\uC790 \uCC3E\uAE30</h3><ul><li>\uCC3E\uB294 \uBB38\uC790\uB85C split\uD55C \uD6C4, \uBC30\uC5F4\uC758 \uAE38\uC774 -1\uB85C \uCC3E\uB294 \uBC29\uBC95\uC774 \uC788\uC74C</li></ul><h3 id="_11-\u1103\u1162\u1106\u116E\u11AB\u110C\u1161-\u110E\u1161\u11BD\u1100\u1175" tabindex="-1"><a class="header-anchor" href="#_11-\u1103\u1162\u1106\u116E\u11AB\u110C\u1161-\u110E\u1161\u11BD\u1100\u1175" aria-hidden="true">#</a> 11. \uB300\uBB38\uC790 \uCC3E\uAE30</h3><h3 id="_12-\u1103\u1162\u1106\u116E\u11AB\u110C\u1161\u1105\u1169-\u1110\u1169\u11BC\u110B\u1175\u11AF" tabindex="-1"><a class="header-anchor" href="#_12-\u1103\u1162\u1106\u116E\u11AB\u110C\u1161\u1105\u1169-\u1110\u1169\u11BC\u110B\u1175\u11AF" aria-hidden="true">#</a> 12. \uB300\uBB38\uC790\uB85C \uD1B5\uC77C</h3><ul><li><code>x === x.toUpperCase()</code></li></ul><h3 id="_13-\u1103\u1162\u1109\u1169\u1106\u116E\u11AB\u110C\u1161-\u1107\u1167\u11AB\u1112\u116A\u11AB" tabindex="-1"><a class="header-anchor" href="#_13-\u1103\u1162\u1109\u1169\u1106\u116E\u11AB\u110C\u1161-\u1107\u1167\u11AB\u1112\u116A\u11AB" aria-hidden="true">#</a> 13. \uB300\uC18C\uBB38\uC790 \uBCC0\uD658</h3><h3 id="_14-\u1100\u1161\u110C\u1161\u11BC-\u1100\u1175\u11AB-\u1106\u116E\u11AB\u110C\u1161\u110B\u1167\u11AF" tabindex="-1"><a class="header-anchor" href="#_14-\u1100\u1161\u110C\u1161\u11BC-\u1100\u1175\u11AB-\u1106\u116E\u11AB\u110C\u1161\u110B\u1167\u11AF" aria-hidden="true">#</a> 14. \uAC00\uC7A5 \uAE34 \uBB38\uC790\uC5F4</h3><ul><li><code>let max = Number.MIN_SAFE_INTEGER;</code></li></ul><h3 id="_15-\u1100\u1161\u110B\u116E\u11AB\u1103\u1166-\u1106\u116E\u11AB\u110C\u1161-\u110E\u116E\u11AF\u1105\u1167\u11A8" tabindex="-1"><a class="header-anchor" href="#_15-\u1100\u1161\u110B\u116E\u11AB\u1103\u1166-\u1106\u116E\u11AB\u110C\u1161-\u110E\u116E\u11AF\u1105\u1167\u11A8" aria-hidden="true">#</a> 15. \uAC00\uC6B4\uB370 \uBB38\uC790 \uCD9C\uB825</h3><ul><li><code>String.prototype.substring, String.prototype.substr</code></li></ul><h3 id="_16-\u110C\u116E\u11BC\u1107\u1169\u11A8\u1106\u116E\u11AB\u110C\u1161\u110C\u1166\u1100\u1165" tabindex="-1"><a class="header-anchor" href="#_16-\u110C\u116E\u11BC\u1107\u1169\u11A8\u1106\u116E\u11AB\u110C\u1161\u110C\u1166\u1100\u1165" aria-hidden="true">#</a> 16. \uC911\uBCF5\uBB38\uC790\uC81C\uAC70</h3><h3 id="_17-\u110C\u116E\u11BC\u1107\u1169\u11A8\u1103\u1161\u11AB\u110B\u1165\u110C\u1166\u1100\u1165" tabindex="-1"><a class="header-anchor" href="#_17-\u110C\u116E\u11BC\u1107\u1169\u11A8\u1103\u1161\u11AB\u110B\u1165\u110C\u1166\u1100\u1165" aria-hidden="true">#</a> 17. \uC911\uBCF5\uB2E8\uC5B4\uC81C\uAC70</h3><h2 id="_1-2\u110E\u1161\u110B\u116F\u11AB-\u1107\u1162\u110B\u1167\u11AF-\u1110\u1161\u11B7\u1109\u1162\u11A8" tabindex="-1"><a class="header-anchor" href="#_1-2\u110E\u1161\u110B\u116F\u11AB-\u1107\u1162\u110B\u1167\u11AF-\u1110\u1161\u11B7\u1109\u1162\u11A8" aria-hidden="true">#</a> 1,2\uCC28\uC6D0 \uBC30\uC5F4 \uD0D0\uC0C9</h2><h3 id="_1-\u110F\u1173\u11AB-\u1109\u116E-\u110E\u116E\u11AF\u1105\u1167\u11A8\u1112\u1161\u1100\u1175" tabindex="-1"><a class="header-anchor" href="#_1-\u110F\u1173\u11AB-\u1109\u116E-\u110E\u116E\u11AF\u1105\u1167\u11A8\u1112\u1161\u1100\u1175" aria-hidden="true">#</a> 1. \uD070 \uC218 \uCD9C\uB825\uD558\uAE30</h3><h3 id="_2-\u1107\u1169\u110B\u1175\u1102\u1173\u11AB-\u1112\u1161\u11A8\u1109\u1162\u11BC" tabindex="-1"><a class="header-anchor" href="#_2-\u1107\u1169\u110B\u1175\u1102\u1173\u11AB-\u1112\u1161\u11A8\u1109\u1162\u11BC" aria-hidden="true">#</a> 2. \uBCF4\uC774\uB294 \uD559\uC0DD</h3><ul><li>O(n)\uC73C\uB85C \uD480 \uC218 \uC788\uB2E4</li></ul><h3 id="_3-\u1100\u1161\u110B\u1171\u1107\u1161\u110B\u1171\u1107\u1169" tabindex="-1"><a class="header-anchor" href="#_3-\u1100\u1161\u110B\u1171\u1107\u1161\u110B\u1171\u1107\u1169" aria-hidden="true">#</a> 3. \uAC00\uC704\uBC14\uC704\uBCF4</h3><h3 id="_4-\u110C\u1165\u11B7\u1109\u116E-\u1100\u1168\u1109\u1161\u11AB" tabindex="-1"><a class="header-anchor" href="#_4-\u110C\u1165\u11B7\u1109\u116E-\u1100\u1168\u1109\u1161\u11AB" aria-hidden="true">#</a> 4. \uC810\uC218 \uACC4\uC0B0</h3><h3 id="_5-\u1103\u1173\u11BC\u1109\u116E-\u1100\u116E\u1112\u1161\u1100\u1175" tabindex="-1"><a class="header-anchor" href="#_5-\u1103\u1173\u11BC\u1109\u116E-\u1100\u116E\u1112\u1161\u1100\u1175" aria-hidden="true">#</a> 5. \uB4F1\uC218 \uAD6C\uD558\uAE30</h3><ul><li><code>Array.from({ length: n }, () =&gt; 1)</code></li><li>1\uB85C \uCD08\uAE30\uD654, \uAE38\uC774\uB294 n</li><li>O(n\xB2)\uC73C\uB85C \uD478\uC168\uC74C</li></ul><h3 id="_6-\u1100\u1167\u11A8\u110C\u1161\u1111\u1161\u11AB-\u110E\u116C\u1103\u1162\u1112\u1161\u11B8" tabindex="-1"><a class="header-anchor" href="#_6-\u1100\u1167\u11A8\u110C\u1161\u1111\u1161\u11AB-\u110E\u116C\u1103\u1162\u1112\u1161\u11B8" aria-hidden="true">#</a> 6. \uACA9\uC790\uD310 \uCD5C\uB300\uD569</h3><ul><li>O(n\xB2)\uC73C\uB85C \uD478\uC168\uC74C</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>for(let i = 0; i &lt; n; i++){
  for(let j = 0; j &lt; n; j++){
    arr[i][j]
    arr[j][i]
  }
}
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_7-\u1107\u1169\u11BC\u110B\u116E\u1105\u1175" tabindex="-1"><a class="header-anchor" href="#_7-\u1107\u1169\u11BC\u110B\u116E\u1105\u1175" aria-hidden="true">#</a> 7. \uBD09\uC6B0\uB9AC</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">const</span> current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">&gt;</span> current<span class="token punctuation">)</span> <span class="token keyword">continue</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> r <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">&gt;</span> current<span class="token punctuation">)</span> <span class="token keyword">continue</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> b <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&gt;</span> current<span class="token punctuation">)</span> <span class="token keyword">continue</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> l <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;</span> current<span class="token punctuation">)</span> <span class="token keyword">continue</span>
      <span class="token punctuation">}</span>
      count <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> count
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><ul><li>4 \uBC29\uD5A5 \uC21C\uD68C \uBC29\uBC95 <code>i + dx[k]</code>, <code>j + dy[k]</code>, <code>dx = [-1, 0, 1, 0], dy = [0, 1, 0, -1]</code></li></ul><h2 id="\u1106\u116E\u11AB\u110C\u1161\u110B\u1167\u11AF-\u1110\u1161\u11B7\u1109\u1162\u11A8" tabindex="-1"><a class="header-anchor" href="#\u1106\u116E\u11AB\u110C\u1161\u110B\u1167\u11AF-\u1110\u1161\u11B7\u1109\u1162\u11A8" aria-hidden="true">#</a> \uBB38\uC790\uC5F4 \uD0D0\uC0C9</h2><h3 id="_1-\u1112\u116C\u1106\u116E\u11AB\u1106\u116E\u11AB\u110C\u1161\u110B\u1167\u11AF" tabindex="-1"><a class="header-anchor" href="#_1-\u1112\u116C\u1106\u116E\u11AB\u1106\u116E\u11AB\u110C\u1161\u110B\u1167\u11AF" aria-hidden="true">#</a> 1. \uD68C\uBB38\uBB38\uC790\uC5F4</h3><h4 id="\u110E\u1165\u11BA\u1107\u1165\u11AB\u110D\u1162-\u1111\u116E\u11AF\u110B\u1175" tabindex="-1"><a class="header-anchor" href="#\u110E\u1165\u11BA\u1107\u1165\u11AB\u110D\u1162-\u1111\u116E\u11AF\u110B\u1175" aria-hidden="true">#</a> \uCCAB\uBC88\uC9F8 \uD480\uC774</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> isOdd <span class="token operator">=</span> str<span class="token punctuation">.</span>length <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span>
  <span class="token keyword">let</span> pointer <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>isOdd <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> countPointer <span class="token operator">=</span> pointer <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>isOdd <span class="token operator">&amp;&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token boolean">true</span>
  
  <span class="token keyword">while</span><span class="token punctuation">(</span>pointer <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> countPointer <span class="token operator">&lt;=</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>pointer<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> str<span class="token punctuation">[</span>countPointer<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
    
    pointer<span class="token operator">--</span>
    countPointer<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li>\uD3EC\uC778\uD130 2\uAC1C\uB97C \uC0AC\uC6A9\uD560 \uD544\uC694\uB294 \uC5C6\uC74C</li><li>i = 0\uBD80\uD130 \uC2DC\uC791\uD574\uC11C len/2 \uAE4C\uC9C0 \uC21C\uD68C\uD558\uBA74 \uB428</li></ul><h4 id="\u1103\u116E\u1107\u1165\u11AB\u110D\u1162-\u1111\u116E\u11AF\u110B\u1175" tabindex="-1"><a class="header-anchor" href="#\u1103\u116E\u1107\u1165\u11AB\u110D\u1162-\u1111\u116E\u11AF\u110B\u1175" aria-hidden="true">#</a> \uB450\uBC88\uC9F8 \uD480\uC774</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> _str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _str<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> _str<span class="token punctuation">[</span>_str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_2-\u1111\u1166\u11AF\u1105\u1175\u11AB\u1103\u1173\u1105\u1169\u11B7" tabindex="-1"><a class="header-anchor" href="#_2-\u1111\u1166\u11AF\u1105\u1175\u11AB\u1103\u1173\u1105\u1169\u11B7" aria-hidden="true">#</a> 2. \uD3A0\uB9B0\uB4DC\uB86C</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> _str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^a-zA-Z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _str<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> _str<span class="token punctuation">[</span>_str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>\uC815\uADDC\uD45C\uD604\uC2DD replace\uAC00 \uD575\uC2EC</li></ul><h3 id="_3-\u1109\u116E\u11BA\u110C\u1161\u1106\u1161\u11AB-\u110E\u116E\u110E\u116E\u11AF" tabindex="-1"><a class="header-anchor" href="#_3-\u1109\u116E\u11BA\u110C\u1161\u1106\u1161\u11AB-\u110E\u116E\u110E\u116E\u11AF" aria-hidden="true">#</a> 3. \uC22B\uC790\uB9CC \uCD94\uCD9C</h3><h3 id="_4-\u1106\u116E\u11AB\u110C\u1161\u1100\u1165\u1105\u1175" tabindex="-1"><a class="header-anchor" href="#_4-\u1106\u116E\u11AB\u110C\u1161\u1100\u1165\u1105\u1175" aria-hidden="true">#</a> 4. \uBB38\uC790\uAC70\uB9AC</h3><h4 id="\u1102\u1162-\u1111\u116E\u11AF\u110B\u1175" tabindex="-1"><a class="header-anchor" href="#\u1102\u1162-\u1111\u116E\u11AF\u110B\u1175" aria-hidden="true">#</a> \uB0B4 \uD480\uC774</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> diff <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> t <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> diff<span class="token punctuation">)</span> diff <span class="token operator">=</span> j <span class="token operator">-</span> i
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> t <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;</span> diff<span class="token punctuation">)</span> diff <span class="token operator">=</span> i <span class="token operator">-</span> j
    <span class="token punctuation">}</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>for \uBB38\uC744 \uC591 \uCABD \uBC29\uD5A5\uC73C\uB85C \uD55C\uBC88\uC529 \uB3CC\uB9AC\uBA74 \uB41C\uB2E4.</li></ul><h3 id="\u1103\u116E\u1107\u1165\u11AB\u110D\u1162-\u1111\u116E\u11AF\u110B\u1175-1" tabindex="-1"><a class="header-anchor" href="#\u1103\u116E\u1107\u1165\u11AB\u110D\u1162-\u1111\u116E\u11AF\u110B\u1175-1" aria-hidden="true">#</a> \uB450\uBC88\uC9F8 \uD480\uC774</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token number">1000</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> t<span class="token punctuation">)</span> p <span class="token operator">+=</span> <span class="token number">1</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> t<span class="token punctuation">)</span> p <span class="token operator">=</span> <span class="token number">0</span>
    
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  p <span class="token operator">=</span> <span class="token number">1000</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!==</span> t<span class="token punctuation">)</span> p <span class="token operator">+=</span> <span class="token number">1</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> t<span class="token punctuation">)</span> p <span class="token operator">=</span> <span class="token number">0</span>
    
		<span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> p<span class="token punctuation">)</span> result<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> p
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ul><li><code>p = 1000</code> : \uAC70\uB9AC\uAC00 \uBA40\uB2E4\uACE0 \uAC00\uC815</li></ul><h3 id="_5-\u1106\u116E\u11AB\u110C\u1161\u110B\u1167\u11AF-\u110B\u1161\u11B8\u110E\u116E\u11A8" tabindex="-1"><a class="header-anchor" href="#_5-\u1106\u116E\u11AB\u110C\u1161\u110B\u1167\u11AF-\u110B\u1161\u11B8\u110E\u116E\u11A8" aria-hidden="true">#</a> 5. \uBB38\uC790\uC5F4 \uC555\uCD95</h3><h2 id="\u110B\u116A\u11AB\u110C\u1165\u11AB\u1110\u1161\u11B7\u1109\u1162\u11A8-\u1107\u1173\u1105\u116E\u1110\u1173\u1111\u1169\u1109\u1173" tabindex="-1"><a class="header-anchor" href="#\u110B\u116A\u11AB\u110C\u1165\u11AB\u1110\u1161\u11B7\u1109\u1162\u11A8-\u1107\u1173\u1105\u116E\u1110\u1173\u1111\u1169\u1109\u1173" aria-hidden="true">#</a> \uC644\uC804\uD0D0\uC0C9(\uBE0C\uB8E8\uD2B8\uD3EC\uC2A4)</h2><h3 id="_1-\u110C\u1161\u1105\u1175\u1109\u116E\u110B\u1174-\u1112\u1161\u11B8" tabindex="-1"><a class="header-anchor" href="#_1-\u110C\u1161\u1105\u1175\u1109\u116E\u110B\u1174-\u1112\u1161\u11B8" aria-hidden="true">#</a> 1. \uC790\uB9AC\uC218\uC758 \uD569</h3><h4 id="\u1102\u1162-\u1111\u116E\u11AF\u110B\u1175-1" tabindex="-1"><a class="header-anchor" href="#\u1102\u1162-\u1111\u116E\u11AF\u110B\u1175-1" aria-hidden="true">#</a> \uB0B4 \uD480\uC774</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> result<span class="token punctuation">;</span>

  <span class="token keyword">const</span> sums <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> 
    Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>

  sums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span> result <span class="token operator">=</span> idx<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> sums<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> idx
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> sums<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">&gt;</span> sums<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> idx
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> arr<span class="token punctuation">[</span>result<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li><p>\uC790\uB9AC\uC218\uC758 \uD569</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> max <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tmp <span class="token operator">=</span> x
  <span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> tmp <span class="token operator">%</span> <span class="token number">10</span>
    tmp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>tmp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>max\uB97C MIN_SAFE_INTEGER\uB85C \uCD08\uAE30\uD654</li><li>\uC815\uADDC\uD654\uB41C \uBC29\uBC95\uC73C\uB85C while\uBB38\uC744 \uD1B5\uD574 \uAC01 \uC790\uB9AC\uC218\uC758 \uD569\uC744 \uAD6C\uD568 (10\uC73C\uB85C \uB098\uB208 \uBAAB\uC774 0\uC774 \uB420\uB54C\uAE4C\uC9C0 \uB098\uBA38\uC9C0\uB97C \uD569)</li></ul></li></ul><h3 id="\u1103\u116E\u1107\u1165\u11AB\u110D\u1162-\u1111\u116E\u11AF\u110B\u1175-2" tabindex="-1"><a class="header-anchor" href="#\u1103\u116E\u1107\u1165\u11AB\u110D\u1162-\u1111\u116E\u11AF\u110B\u1175-2" aria-hidden="true">#</a> \uB450\uBC88\uC9F8 \uD480\uC774</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> answer<span class="token punctuation">;</span>
  <span class="token keyword">let</span> max <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> x <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> tmp <span class="token operator">=</span> x<span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">{</span>
      sum <span class="token operator">+=</span> tmp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
      tmp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>tmp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      max <span class="token operator">=</span> sum<span class="token punctuation">;</span>
      answer <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> answer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        answer <span class="token operator">=</span> x<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> answer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="_2-\u1103\u1171\u110C\u1175\u11B8\u110B\u1173\u11AB-\u1109\u1169\u1109\u116E" tabindex="-1"><a class="header-anchor" href="#_2-\u1103\u1171\u110C\u1175\u11B8\u110B\u1173\u11AB-\u1109\u1169\u1109\u116E" aria-hidden="true">#</a> 2. \uB4A4\uC9D1\uC740 \uC18C\uC218</h3><h4 id="\u1102\u1162-\u1111\u116E\u11AF\u110B\u1175-2" tabindex="-1"><a class="header-anchor" href="#\u1102\u1162-\u1111\u116E\u11AF\u110B\u1175-2" aria-hidden="true">#</a> \uB0B4 \uD480\uC774</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>reverseStrAndParseToNumber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">reverseStrAndParseToNumber</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="\u1103\u116E\u1107\u1165\u11AB\u110D\u1162-\u1111\u116E\u11AF\u110B\u1175-3" tabindex="-1"><a class="header-anchor" href="#\u1103\u116E\u1107\u1165\u11AB\u110D\u1162-\u1111\u116E\u11AF\u110B\u1175-3" aria-hidden="true">#</a> \uB450\uBC88\uC9F8 \uD480\uC774</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>reverseNumber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">reverseNumber</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> numCopy <span class="token operator">=</span> num<span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span><span class="token punctuation">(</span>numCopy <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>numCopy <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
    numCopy <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>numCopy <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>numCopy <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
  numCopy <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>numCopy <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><ul><li>String =&gt; reverse =&gt; join\uC774 \uC544\uB2CC \uC22B\uC790 \uACC4\uC0B0\uC73C\uB85C\uB9CC \uC22B\uC790\uB97C \uB4A4\uC9D1\uC5B4 \uBCF4\uB77C\uB294 \uB9D0\uC500\uC744 \uB4E3\uACE0 \uB2E4\uC2DC \uD480\uC5B4\uBD04</li></ul><p>--</p><ul><li>\uBB38\uC81C\uB97C \uD1B5\uC73C\uB85C \uC62C\uB9AC\uB294 \uACBD\uC6B0\uAC00 \uC544\uB2C8\uBA74 \uD3EC\uC2A4\uD305 \uAD1C\uCC2E\uB2E4\uB294 \uAC15\uC0AC\uB2D8 \uB9D0\uC500\uC774 \uC788\uC5B4 \uC77C\uBD80 \uD480\uC774\uB97C \uC218\uB85D\uD558\uAE30\uB85C \uD568 (https://www.inflearn.com/questions/270711)</li></ul>`,90);function w(y,g){const t=s("ExternalLinkIcon"),e=s("ProgressBar");return c(),l(r,null,[n("h1",k,[b,m,n("a",d,[h,a(t)])]),a(e,{name:"\uC790\uBC14\uC2A4\uD06C\uB9BD\uD2B8 \uC54C\uACE0\uB9AC\uC998 \uBB38\uC81C \uD480\uC774",max:94,value:35}),f],64)}var v=o(i,[["render",w]]);export{v as default};
